// SPDX-FileCopyrightText: 2024 Dvir <39403717+dvir001@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Shared._NF.PlantAnalyzer;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Text;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client._NF.PlantAnalyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class PlantAnalyzerWindow : FancyWindow
{
    private readonly IEntityManager _entityManager;
    private readonly ButtonGroup _buttonGroup = new();

    private const string IndentedNewline = "\n   ";

    public PlantAnalyzerWindow(PlantAnalyzerBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();

        OnButton.Group = _buttonGroup;
        OnButton.ToggleMode = true;
        OffButton.Group = _buttonGroup;
        OffButton.ToggleMode = true;

        OnButton.OnPressed += _ => owner.AdvPressed(true);
        OffButton.OnPressed += _ => owner.AdvPressed(false);
    }

    public void Populate(PlantAnalyzerScannedSeedPlantInformation msg)
    {
        var target = _entityManager.GetEntity(msg.TargetEntity);
        Title = Loc.GetString("plant-analyzer-interface-title");

        if (target == null)
        {
            NoData.Visible = true;
            return;
        }
        NoData.Visible = false;

        if (msg.AdvancedInfo != null)
            OnButton.Pressed = true;
        else
            OffButton.Pressed = true;

        // Process message fields into strings.
        StringBuilder chemString = new();
        if (msg.SeedChem != null)
        {
            foreach (var chem in msg.SeedChem)
            {
                chemString.Append(IndentedNewline);
                chemString.Append(chem);
            }
        }

        var exudeGases = GetStringFromGas(msg.ExudeGases);
        var consudeGases = GetStringFromGas(msg.ConsumeGases);

        PlantName.Text = Loc.GetString(msg.IsTray
            ? "plant-analyzer-window-label-name-scanned-plant"
            : "plant-analyzer-window-label-name-scanned-seed",
            ("seedName", Loc.GetString(string.IsNullOrEmpty(msg.SeedName) ? "plant-analyzer-unknown-plant" : msg.SeedName)));
        // Basics
        PlantYield.Text = Loc.GetString("plant-analyzer-plant-yield-text", ("seedYield", $"{msg.SeedYield:D0}"));
        Potency.Text = Loc.GetString("plant-analyzer-plant-potency-text", ("seedPotency", $"{msg.SeedPotency:F0}"));
        Repeat.Text = Loc.GetString("plant-analyzer-plant-harvest-text", ("plantHarvestType", Loc.GetString($"plant-analyzer-harvest-{msg.HarvestType}")));
        Endurance.Text = Loc.GetString("plant-analyzer-plant-endurance-text", ("seedEndurance", $"{msg.Endurance:F0}"));
        Chemicals.Text = Loc.GetString("plant-analyzer-plant-chemistry-text", ("seedChem", chemString));
        ExudeGases.Text = Loc.GetString("plant-analyzer-plant-exude-text", ("gases", exudeGases.Length == 0 ? Loc.GetString("plant-analyzer-plant-gases-none") : exudeGases.ToString()));
        ConsumeGases.Text = Loc.GetString("plant-analyzer-plant-consume-text", ("gases", consudeGases.Length == 0 ? Loc.GetString("plant-analyzer-plant-gases-none") : consudeGases.ToString()));
        Lifespan.Text = Loc.GetString("plant-analyzer-plant-lifespan-text", ("lifespan", $"{msg.Lifespan:F1}"));
        Maturation.Text = Loc.GetString("plant-analyzer-plant-maturation-text", ("maturation", $"{msg.Maturation:F1}"));
        Production.Text = Loc.GetString("plant-analyzer-plant-production-text", ("production", $"{msg.Production:F1}"));
        GrowthStages.Text = Loc.GetString("plant-analyzer-plant-growthstages-text", ("growthStages", $"{msg.GrowthStages:D0}"));
        // Tolerances
        var adv = msg.AdvancedInfo;
        NutrientUsage.Text = Loc.GetString("plant-analyzer-tolerance-nutrient-usage", ("nutrientUsage", adv == null ? "-" : $"{adv.Value.NutrientConsumption:F2}"));
        WaterUsage.Text = Loc.GetString("plant-analyzer-tolerance-water-usage", ("waterUsage", adv == null ? "-" : $"{adv.Value.WaterConsumption:F2}"));
        IdealHeat.Text = Loc.GetString("plant-analyzer-tolerance-ideal-heat", ("idealHeat", adv == null ? "-" : $"{adv.Value.IdealHeat:F0}"));
        HeatTolerance.Text = Loc.GetString("plant-analyzer-tolerance-heat-tolerance", ("heatTolerance", adv == null ? "-" : $"{adv.Value.HeatTolerance:F1}"));
        IdealLight.Text = Loc.GetString("plant-analyzer-tolerance-ideal-light", ("idealLight", adv == null ? "-" : $"{adv.Value.IdealLight:F1}"));
        LightTolerance.Text = Loc.GetString("plant-analyzer-tolerance-light-tolerance", ("lightTolerance", adv == null ? "-" : $"{adv.Value.LightTolerance:F1}"));
        ToxinsTolerance.Text = Loc.GetString("plant-analyzer-tolerance-toxin-tolerance", ("toxinsTolerance", adv == null ? "-" : $"{adv.Value.ToxinsTolerance:F1}"));
        LowPressureTolerance.Text = Loc.GetString("plant-analyzer-tolerance-low-pressure", ("lowPressureTolerance", adv == null ? "-" : $"{adv.Value.LowPressureTolerance:F1}"));
        HighPressureTolerance.Text = Loc.GetString("plant-analyzer-tolerance-high-pressure", ("highPressureTolerance", adv == null ? "-" : $"{adv.Value.HighPressureTolerance:F1}"));
        PestTolerance.Text = Loc.GetString("plant-analyzer-tolerance-pest-tolerance", ("pestTolerance", adv == null ? "-" : $"{adv.Value.PestTolerance:F1}"));
        WeedTolerance.Text = Loc.GetString("plant-analyzer-tolerance-weed-tolerance", ("weedTolerance", adv == null ? "-" : $"{adv.Value.WeedTolerance:F1}"));
        // Misc

        if (adv != null)
        {
            var advInst = adv.Value;
            StringBuilder mutations = new();
            foreach (var flag in Enum.GetValues<MutationFlags>())
            {
                if (!advInst.Mutations.HasFlag(flag)
                    || flag.ToString() == "none")
                    continue;
                mutations.Append(IndentedNewline);
                mutations.Append(Loc.GetString($"plant-analyzer-mutation-{flag.ToString().ToLower()}"));
            }

            Traits.Text = Loc.GetString("plant-analyzer-plant-mutations-text", ("traits", mutations.ToString()));
        }
        else
        {
            Traits.Text = Loc.GetString("plant-analyzer-plant-mutations-text", ("traits", "-"));
        }

        StringBuilder speciation = new();
        if (msg.Speciation == null)
        {
            speciation.Append('-');
        }
        else
        {
            foreach (var species in msg.Speciation)
            {
                speciation.Append(IndentedNewline);
                speciation.Append(Loc.GetString(species));
            }
        }

        PlantSpeciation.Text = Loc.GetString("plant-analyzer-plant-speciation-text", ("speciation", speciation.ToString()));
    }

    private StringBuilder GetStringFromGas(Gas[]? gases)
    {
        var output = new StringBuilder();
        if (gases == null)
            return output;

        foreach (var gas in gases)
        {
            output.Append(IndentedNewline);
            output.Append(Loc.GetString($"gases-{gas.ToString().ToLower()}"));
        }
        return output;
    }
}
