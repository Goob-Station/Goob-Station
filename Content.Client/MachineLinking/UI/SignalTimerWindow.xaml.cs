// SPDX-FileCopyrightText: 2023 CommieFlowers <rasmus.cedergren@hotmail.com>
// SPDX-FileCopyrightText: 2023 rolfero <45628623+rolfero@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 12rabbits <53499656+12rabbits@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Alzore <140123969+Blackern5000@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 ArtisticRoomba <145879011+ArtisticRoomba@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Brandon Hu <103440971+Brandon-Huu@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Dimastra <65184747+Dimastra@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Dimastra <dimastra@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Ed <96445749+TheShuEd@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Emisse <99158783+Emisse@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Eoin Mcloughlin <helloworld@eoinrul.es>
// SPDX-FileCopyrightText: 2024 IProduceWidgets <107586145+IProduceWidgets@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 JIPDawg <51352440+JIPDawg@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 JIPDawg <JIPDawg93@gmail.com>
// SPDX-FileCopyrightText: 2024 Mervill <mervills.email@gmail.com>
// SPDX-FileCopyrightText: 2024 Moomoobeef <62638182+Moomoobeef@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 PJBot <pieterjan.briers+bot@gmail.com>
// SPDX-FileCopyrightText: 2024 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 2024 Pieter-Jan Briers <pieterjan.briers@gmail.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 PopGamer46 <yt1popgamer@gmail.com>
// SPDX-FileCopyrightText: 2024 PursuitInAshes <pursuitinashes@gmail.com>
// SPDX-FileCopyrightText: 2024 QueerNB <176353696+QueerNB@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Saphire Lattice <lattice@saphi.re>
// SPDX-FileCopyrightText: 2024 ShadowCommander <10494922+ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Simon <63975668+Simyon264@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Spessmann <156740760+Spessmann@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Thomas <87614336+Aeshus@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Winkarst <74284083+Winkarst-cpu@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 deltanedas <39013340+deltanedas@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 deltanedas <@deltanedas:kde.org>
// SPDX-FileCopyrightText: 2024 eoineoineoin <github@eoinrul.es>
// SPDX-FileCopyrightText: 2024 github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 lzk <124214523+lzk228@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 slarticodefast <161409025+slarticodefast@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 stellar-novas <stellar_novas@riseup.net>
// SPDX-FileCopyrightText: 2024 themias <89101928+themias@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Content.Client.TextScreen;

namespace Content.Client.MachineLinking.UI;

[GenerateTypedNameReferences]
public sealed partial class SignalTimerWindow : DefaultWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    private const int MaxTextLength = 5;

    public event Action<string>? OnCurrentTextChanged;
    public event Action<string>? OnCurrentDelayMinutesChanged;
    public event Action<string>? OnCurrentDelaySecondsChanged;

    private TimeSpan? _triggerTime;

    private bool _timerStarted;

    public event Action? OnStartTimer;

    public SignalTimerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CurrentTextEdit.OnTextChanged += e => OnCurrentTextChange(e.Text);
        CurrentDelayEditMinutes.OnTextChanged += e => OnCurrentDelayMinutesChange(e.Text);
        CurrentDelayEditSeconds.OnTextChanged += e => OnCurrentDelaySecondsChange(e.Text);
        StartTimer.OnPressed += _ => StartTimerWeh();
    }

    private void StartTimerWeh()
    {
        if (!_timerStarted)
        {
            _timerStarted = true;
            _triggerTime = _timing.CurTime + GetDelay();
        }
        else
        {
            SetTimerStarted(false);
        }

        OnStartTimer?.Invoke();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (!_timerStarted || _triggerTime == null)
            return;

        if (_timing.CurTime < _triggerTime.Value)
        {
            StartTimer.Text = TextScreenSystem.TimeToString(_triggerTime.Value - _timing.CurTime);
        }
        else
        {
            SetTimerStarted(false);
        }
    }

    public void OnCurrentTextChange(string text)
    {
        if (CurrentTextEdit.Text.Length > MaxTextLength)
        {
            CurrentTextEdit.Text = CurrentTextEdit.Text.Remove(MaxTextLength);
            CurrentTextEdit.CursorPosition = MaxTextLength;
        }
        OnCurrentTextChanged?.Invoke(text);
    }

    public void OnCurrentDelayMinutesChange(string text)
    {
        List<char> toRemove = new();

        foreach (var a in text)
        {
            if (!char.IsDigit(a))
                toRemove.Add(a);
        }

        foreach (var a in toRemove)
        {
            CurrentDelayEditMinutes.Text = text.Replace(a.ToString(),"");
        }

        if (CurrentDelayEditMinutes.Text == "")
            return;

        while (CurrentDelayEditMinutes.Text[0] == '0' && CurrentDelayEditMinutes.Text.Length > 2)
        {
            CurrentDelayEditMinutes.Text = CurrentDelayEditMinutes.Text.Remove(0, 1);
        }

        if (CurrentDelayEditMinutes.Text.Length > 2)
        {
            CurrentDelayEditMinutes.Text = CurrentDelayEditMinutes.Text.Remove(2);
        }
        OnCurrentDelayMinutesChanged?.Invoke(CurrentDelayEditMinutes.Text);
    }

    public void OnCurrentDelaySecondsChange(string text)
    {
        List<char> toRemove = new();

        foreach (var a in text)
        {
            if (!char.IsDigit(a))
                toRemove.Add(a);
        }

        foreach (var a in toRemove)
        {
            CurrentDelayEditSeconds.Text = text.Replace(a.ToString(), "");
        }

        if (CurrentDelayEditSeconds.Text == "")
            return;

        while (CurrentDelayEditSeconds.Text[0] == '0' && CurrentDelayEditSeconds.Text.Length > 2)
        {
            CurrentDelayEditSeconds.Text = CurrentDelayEditSeconds.Text.Remove(0, 1);
        }

        if (CurrentDelayEditSeconds.Text.Length > 2)
        {
            CurrentDelayEditSeconds.Text = CurrentDelayEditSeconds.Text.Remove(2);
        }
        OnCurrentDelaySecondsChanged?.Invoke(CurrentDelayEditSeconds.Text);
    }

    public void SetCurrentText(string text)
    {
        CurrentTextEdit.Text = text;
    }

    public void SetCurrentDelayMinutes(string delay)
    {
        CurrentDelayEditMinutes.Text = delay;
    }

    public void SetCurrentDelaySeconds(string delay)
    {
        CurrentDelayEditSeconds.Text = delay;
    }

    public void SetShowText(bool showTime)
    {
        TextEdit.Visible = showTime;
    }

    public void SetTriggerTime(TimeSpan timeSpan)
    {
        _triggerTime = timeSpan;
    }

    public void SetTimerStarted(bool timerStarted)
    {
        _timerStarted = timerStarted;

        if (!timerStarted)
            StartTimer.Text = Loc.GetString("signal-timer-menu-start");
    }

    /// <summary>
    ///     Disables fields and buttons if you don't have the access.
    /// </summary>
    public void SetHasAccess(bool hasAccess)
    {
        CurrentTextEdit.Editable = hasAccess;
        CurrentDelayEditMinutes.Editable = hasAccess;
        CurrentDelayEditSeconds.Editable = hasAccess;
        StartTimer.Disabled = !hasAccess;
    }

    /// <summary>
    ///     Returns a TimeSpan from the currently entered delay.
    /// </summary>
    public TimeSpan GetDelay()
    {
        if (!double.TryParse(CurrentDelayEditMinutes.Text, out var minutes))
            minutes = 0;
        if (!double.TryParse(CurrentDelayEditSeconds.Text, out var seconds))
            seconds = 0;
        return TimeSpan.FromMinutes(minutes) + TimeSpan.FromSeconds(seconds);
    }
}