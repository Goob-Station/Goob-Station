using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Client.Administration.Managers;
using Robust.Client.Console;
using Content.Shared._Goobstation.ServerCurrency;
using Robust.Shared.Prototypes;

namespace Content.Client._Goobstation.ServerCurrency.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CurrencyWindow : DefaultWindow
    {
        [Dependency] private readonly ServerCurrencySystem _serverCur = default!;
        [Dependency] private readonly IClientAdminManager _adminManager = default!;
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
        [Dependency] private readonly IPrototypeManager _protoManager = default!;
        public event Action<ProtoId<TokenListingPrototype>>? OnBuy;
        private bool isAdmin = false;

        public CurrencyWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            UpdatePlayerBalance();

            isAdmin = _adminManager.CanCommand("balance:add");

            if (!isAdmin)
                Admin.Visible = false;

            GiftButton.OnPressed += _ => Transfer(GiftPlayer.Text, int.Parse(GiftAmmount.Text));

            AdminAddButton.OnPressed += _ => AdminAdd(AdminAddPlayer.Text, int.Parse(AdminAddAmmount.Text));

            _serverCur.BalanceChange += UpdatePlayerBalance;

            PopulateTokenButtons();
        }

        private void PopulateTokenButtons()
        {
            TokenListingsContainer.DisposeAllChildren();

            var tokenListings = _protoManager.EnumeratePrototypes<TokenListingPrototype>();
            
            foreach (var listing in tokenListings)
            {
                var button = new Button
                {
                    Text = Loc.GetString(listing.Name),
                    MinHeight = 40
                };

                var panel = new PanelContainer
                {
                    ToolTip = Loc.GetString(listing.Description),
                    Children = { button }
                };

                button.OnPressed += _ =>
                {
                    OnBuy?.Invoke(listing.ID);
                    ShowConfirmation(Loc.GetString(listing.AdminNote));
                };

                TokenListingsContainer.AddChild(panel);
                
                // Add spacer between buttons
                TokenListingsContainer.AddChild(new Control 
                { 
                    MinSize = (0, 5)
                });
            }
        }

        private void Transfer(string player, int value)
        {
            if (player == null || value == 0)
                return;

            _consoleHost.ExecuteCommand("gift " + player + " " + value);

            UpdatePlayerBalance();
        }

        private void AdminAdd(string player, int value)
        {
            if (!isAdmin || player == null || value == 0)
                return;

            _consoleHost.ExecuteCommand("balance:add " + player + " " + value);

            UpdatePlayerBalance();
        }

        private void UpdatePlayerBalance() // Goobstation - Goob Coin
        {
            var balance = _serverCur.GetBalance();
            Header.Text = _serverCur.Stringify(balance);
            Logger.Info("Balance: " + balance);
            UpdateButtonStates(balance);
        }

        private void UpdateButtonStates(int? balance = null)
        {
            if (balance == null)
                balance = _serverCur.GetBalance();

            AntagTokenBuy.Disabled = balance < 325;
            GhostRoleTokenBuy.Disabled = balance < 450;
            EventTokenBuy.Disabled = balance < 150;
        }

        private void ShowConfirmation(string message)
        {
            ConfirmationMessage.Text = message;
        }
    }
}
