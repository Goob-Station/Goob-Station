using System.Linq;
using System.Numerics;
using Content.Shared._Goobstation.Wizard.Teleport;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Goobstation.Wizard.Teleport
{
    [GenerateTypedNameReferences]
    public sealed partial class WizardTeleportTargetWindow : DefaultWindow
    {
        private List<WizardWarp> _warps = new();
        private string _searchText = string.Empty;

        public event Action<NetEntity, string>? WarpClicked;

        public WizardTeleportTargetWindow()
        {
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;
        }

        public void UpdateWarps(IEnumerable<WizardWarp> warps)
        {
            // Server COULD send these sorted but how about we just use the client to do it instead
            _warps = warps
                .OrderBy(w => w.DisplayName,
                    Comparer<string>.Create((x, y) => string.Compare(x, y, StringComparison.Ordinal)))
                .ToList();
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtons();
        }

        private void AddButtons()
        {
            foreach (var warp in _warps)
            {
                var name = warp.DisplayName;
                var warpTarget = warp.Entity;

                var currentButtonRef = new Button
                {
                    Text = name,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    MinSize = new Vector2(340, 20),
                    ClipText = true,
                };

                currentButtonRef.OnPressed += _ =>
                {
                    WarpClicked?.Invoke(warpTarget, name);
                    Close();
                };
                currentButtonRef.Visible = ButtonIsVisible(currentButtonRef);

                ButtonContainer.AddChild(currentButtonRef);
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            return string.IsNullOrEmpty(_searchText) || button.Text == null ||
                   button.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }

        private void UpdateVisibleButtons()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Button button)
                    button.Visible = ButtonIsVisible(button);
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;

            UpdateVisibleButtons();
            // Reset scroll bar so they can see the relevant results.
            Scroll.SetScrollValue(Vector2.Zero);
        }
    }
}
