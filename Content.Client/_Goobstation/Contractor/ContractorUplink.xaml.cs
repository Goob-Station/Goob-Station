using Content.Shared._Goobstation.Contracts;
using Content.Shared.IdentityManagement;
using Microsoft.CodeAnalysis.Elfie.Serialization;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Goobstation.Contractor;

[GenerateTypedNameReferences]
public sealed partial class ContractorUplink : DefaultWindow
{
    public event Action<UiMessage>? OnContractButtonClicked;
    private readonly IEntityManager _entityManager;

    public ContractorUplink()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _entityManager = IoCManager.Resolve<IEntityManager>();
    }

    public void UpdateState(BoundUserInterfaceState state)
    {
        var castState = (ContractorUplinkBoundUserInterfaceState) state;

        if (ContractContainer.ChildCount > 0)
            ContractContainer.Children.Clear();
        // fill out the list of contracts
        foreach (var (target, locations) in castState.Contracts)
        {
            var contractUi = new Contract();
            contractUi.TargetText.Text = Identity.Name(_entityManager.GetEntity(target), _entityManager);
            ContractContainer.AddChild(contractUi);
            PopulateLocations(locations, contractUi);
        }
    }

    public void PopulateLocations(List<NetEntity> locations, Contract ui)
    {
        foreach (var location in locations)
        {
            var button = new Button();
            button.Text = GetMarkerName(_entityManager.GetEntity(location)) + " (x) TC"; //
            ui.ExtractionOptions.AddChild(button);
            button.OnPressed += _ => OnContractButtonClicked?.Invoke(UiMessage.SelectTarget);
        }
    }

    private string GetMarkerName(EntityUid uid)
    {
        if (!_entityManager.TryGetComponent<ContractorMarkerComponent>(uid, out var contractorMarkerComponent) ||
            contractorMarkerComponent.Name == null)
            return string.Empty;

        return Loc.GetString(contractorMarkerComponent.Name);
    }
}
