using Content.Shared._Goobstation.Contracts;
using Content.Shared.IdentityManagement;
using Microsoft.CodeAnalysis.Elfie.Serialization;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Serilog;

namespace Content.Client._Goobstation.Contractor;

[GenerateTypedNameReferences]
public sealed partial class ContractorUplink : DefaultWindow
{
    public event Action<ContractorUiMessage>? OnContractButtonClicked;
    private readonly IEntityManager _entityManager;

    public ContractorUplink()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _entityManager = IoCManager.Resolve<IEntityManager>();
    }

    public void UpdateState(BoundUserInterfaceState state)
    {
        ExtractionButton.OnPressed += _ => OnContractButtonClicked?.Invoke(new ContractorUiMessage(UiMessage.TryExtraction, NetEntity.Invalid, NetEntity.Invalid));
        var castState = (ContractorUplinkBoundUserInterfaceState) state;
        if (ContractContainer.ChildCount > 0)
            ContractContainer.Children.Clear();

        // fill out the list of contracts
        foreach (var (target, locations) in castState.Contracts)
        {
            var contractUi = new Contract();
            if (castState.CurrentTarget == target)
                contractUi.ActiveText.Visible = true;
            contractUi.TargetText.Text = Identity.Name(_entityManager.GetEntity(target), _entityManager);
            ContractContainer.AddChild(contractUi);
            PopulateLocations(target, locations, contractUi, castState);
        }
    }

    private void PopulateLocations(NetEntity target, List<NetEntity> locations, Contract ui, ContractorUplinkBoundUserInterfaceState state)
    {
        foreach (var location in locations)
        {
            var button = new Button();
            if (!_entityManager.TryGetComponent<ContractorMarkerComponent>(_entityManager.GetEntity(location), out var contractorMarkerComponent) || contractorMarkerComponent.Name == null)
                return;

            button.Text = Loc.GetString(contractorMarkerComponent.Name) + " (" + contractorMarkerComponent.TcReward +") TC"; //
            ui.ExtractionOptions.AddChild(button);
            if (state.CurrentTarget != NetEntity.Invalid)
                button.Disabled = true;
            button.OnPressed += _ => OnContractButtonClicked?.Invoke(new ContractorUiMessage(UiMessage.SelectTarget, target, location));
        }
    }
}
