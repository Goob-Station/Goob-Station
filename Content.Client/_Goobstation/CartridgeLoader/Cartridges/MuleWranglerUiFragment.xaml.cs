using System.Linq;
using Content.Client.PDA;
using Content.Shared._Goobstation.CartridgeLoader.Cartridges;
using Content.Shared._Goobstation.MULE.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Goobstation.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class MuleWranglerUiFragment : BoxContainer
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    [Dependency] private ILocalizationManager _localizationManager = default!;

    public List<NetEntity> MuleList = new();
    public List<NetEntity> BeaconList = new();

    public NetEntity SelectedMule = NetEntity.Invalid;
    public NetEntity SelectedBeacon = NetEntity.Invalid;

    public event Action<MuleWranglerMessageType, NetEntity, NetEntity?>? OnMessageSent;

    public MuleWranglerUiFragment()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        Home();
    }

    public void UpdateState(MuleWranglerUiState state)
    {
        MuleList = state.Mules;
        BeaconList = state.Beacons;
    }

    private void ClearButtons()
    {
        if (ButtonContainer.Children.Count() > 0)
        {
            ButtonContainer.RemoveAllChildren();
        }
    }

    private void PopulateMules()
    {
        ClearButtons();

        foreach (var uid in MuleList)
        {
            var newButton = new PdaSettingsButton();
            newButton.Text = $"MULEBot {uid}";
            ButtonContainer.AddChild(newButton);
        }

        var i = 0;
        foreach (var control in ButtonContainer.Children)
        {
            if(control is not PdaSettingsButton pdaButton)
                continue;

            pdaButton.OnPressed += _ =>
            {
                SelectedMule = MuleList[i - 1];
                Home();
            };
            i++;
        }
    }

    private void PopulateBeacon()
    {
        ClearButtons();

        foreach (var uid in BeaconList)
        {
            var newButton = new PdaSettingsButton();

            if (!_entityManager.TryGetEntity(uid, out var nnUid))
                continue;
            if(!_entityManager.TryGetComponent<MetaDataComponent>(nnUid,out var metaData))
                continue;
            if (metaData.EntityPrototype == null)
                continue;
            var suffix = _localizationManager.GetEntityData(metaData.EntityPrototype.ID).Suffix;
            if (string.IsNullOrEmpty(suffix))
                continue;
            newButton.Text = suffix;
            ButtonContainer.AddChild(newButton);
        }

        var i = 0;
        foreach (var control in ButtonContainer.Children)
        {
            if(control is not PdaSettingsButton pdaButton)
                continue;

            pdaButton.OnPressed += _ =>
            {
                SelectedBeacon = BeaconList[i - 1];
                OnMessageSent?.Invoke(MuleWranglerMessageType.SetDestination, SelectedMule, SelectedBeacon);
                Home();
            };
            i++;
        }
    }

    private void SetupOrders()
    {
        ClearButtons();
        var deliverButton = new PdaSettingsButton();
        var returnButton = new PdaSettingsButton();
        deliverButton.Text = "Deliver to Set Destination";
        returnButton.Text = "Return Home";
        ButtonContainer.AddChild(deliverButton);
        ButtonContainer.AddChild(returnButton);
        deliverButton.OnPressed += _ => Deliver();
        returnButton.OnPressed += _ => Home();
    }

    private void Deliver()
    {
        if (SelectedBeacon != NetEntity.Invalid && SelectedMule != NetEntity.Invalid)
        {
            OnMessageSent?.Invoke(MuleWranglerMessageType.Transport, SelectedMule, null);
        }
        Home();
    }

    private void Home()
    {
        ClearButtons();
        var selectButton = new PdaSettingsButton();
        var orderButton = new PdaSettingsButton();
        var destinationButton = new PdaSettingsButton(); // localize below
        selectButton.Text = "Select";
        selectButton.Description = "Select MULEBot to control";
        orderButton.Text = "Order";
        orderButton.Description = "Give MULEBot an order.";
        destinationButton.Text = "Destination";
        destinationButton.Description = "Set MULEBot's Destination";
        if (SelectedMule == NetEntity.Invalid)
        {
            IdentifyMuleLabel.Text = "None";
        }
        else
        {
            IdentifyMuleLabel.Text = $"MULEBot {SelectedMule}";
        }
        ButtonContainer.AddChild(selectButton);
        ButtonContainer.AddChild(orderButton);
        ButtonContainer.AddChild(destinationButton);
        selectButton.OnPressed += _ => PopulateMules();
        orderButton.OnPressed += _ => SetupOrders();
        destinationButton.OnPressed += _ => PopulateBeacon();
    }
}
