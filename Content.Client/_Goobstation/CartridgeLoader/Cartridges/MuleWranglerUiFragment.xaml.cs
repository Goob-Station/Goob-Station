using System.Linq;
using Content.Client.PDA;
using Content.Shared._Goobstation.CartridgeLoader.Cartridges;
using Content.Shared._Goobstation.MULE.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Goobstation.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class MuleWranglerUiFragment : BoxContainer
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    public List<NetEntity> MuleList = new();
    public NetEntity SelectedMule = NetEntity.Invalid;
    public MuleWranglerUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Setup();
    }

    public void UpdateState(MuleWranglerUiState state)
    {
        MuleList = state.Mules;
    }

    public void Populate()
    {
        if (ButtonContainer.Children.Count() > 0)
        {
            ButtonContainer.RemoveAllChildren();
        }

        foreach (var uid in MuleList)
        {
            Logger.Debug(uid.ToString());
            var newButton = new PdaSettingsButton();
            newButton.Text = $"MuleBot {uid}";
            ButtonContainer.AddChild(newButton);
        }

        var i = 0;
        foreach (var control in ButtonContainer.Children)
        {
            if(control is not PdaSettingsButton pdaButton)
                continue;

            pdaButton.OnPressed += _ =>
            {
                Logger.Debug(i.ToString());
                SelectedMule = MuleList[i - 1];
                Setup();
            };

            i++;
        }
    }

    public void Setup()
    {
        if (ButtonContainer.Children.Count() > 0)
        {
            ButtonContainer.RemoveAllChildren();
        }   
        var selectButton = new PdaSettingsButton();
        var orderButton = new PdaSettingsButton();
        var destinationButton = new PdaSettingsButton(); // localize below
        selectButton.Text = "Select";
        selectButton.Description = "Select MULE to control";
        orderButton.Text = "Order";
        orderButton.Description = "Give MULE an order.";
        destinationButton.Text = "Destination";
        destinationButton.Description = "Set MULE's Destination";
        if (SelectedMule == NetEntity.Invalid)
        {
            IdentifyMuleLabel.Text = "None";
        }
        else
        {
            IdentifyMuleLabel.Text = $"MULEBot {SelectedMule}";
        }
        ButtonContainer.AddChild(selectButton);
        ButtonContainer.AddChild(orderButton);
        ButtonContainer.AddChild(destinationButton);
        selectButton.OnPressed += _ => Populate();
    }
}
