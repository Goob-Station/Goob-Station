using Content.Client.Message;
using Content.Shared._Goobstation.NTR;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Goobstation.NTR.UI;

[GenerateTypedNameReferences]
public sealed partial class NtrTaskHistoryEntry : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public NtrTaskHistoryEntry(NtrTaskHistoryData task)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        if (!_prototype.TryIndex(task.Task, out var taskPrototype))
            return;

        var items = new List<string>();
        foreach (var entry in taskPrototype.Entries)
        {
            items.Add(Loc.GetString("bounty-console-manifest-entry",
                ("amount", entry.Amount),
                ("item", Loc.GetString(entry.Name))));
        }

        ManifestLabel.SetMarkup(Loc.GetString("bounty-console-manifest-label", ("item", string.Join(", ", items))));
        RewardLabel.SetMarkup(Loc.GetString("bounty-console-reward-label", ("reward", taskPrototype.Reward)));
        IdLabel.SetMarkup(Loc.GetString("bounty-console-id-label", ("id", task.Id)));

        TimestampLabel.SetMarkup(task.Timestamp.ToString(@"hh\:mm\:ss"));

        if (task.Result == NtrTaskHistoryData.TaskResult.Completed)
        {
            NoticeLabel.SetMarkup(Loc.GetString("bounty-console-history-notice-completed-label"));
        }
        else
        {
            NoticeLabel.SetMarkup(Loc.GetString("bounty-console-history-notice-skipped-label",
                ("id", task.ActorName ?? "")));
        }
    }
}
