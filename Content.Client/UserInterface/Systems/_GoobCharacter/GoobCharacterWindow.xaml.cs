using System.Linq;
using Content.Client.CharacterInfo;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems._GoobCharacter.Controls;
using Content.Client.UserInterface.Systems.Character.Controls;
using Content.Client.UserInterface.Systems.Objectives.Controls;
using Content.Shared.Mind;
using Content.Shared.Mind.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems._GoobCharacter;

[GenerateTypedNameReferences]
public sealed partial class GoobCharacterWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly SpriteSystem _sprite;
    private readonly CharacterInfoSystem _characterInfo;

    public GoobCharacterWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _ent.System<SpriteSystem>();
        _characterInfo = _ent.System<CharacterInfoSystem>();

        Tabs.SetTabTitle(0, Loc.GetString("ui-character-tab-info"));
        Tabs.SetTabTitle(1, Loc.GetString("ui-character-tab-knowledge"));
    }

    public void CharacterUpdated(CharacterInfoSystem.CharacterData data)
    {
        SetCharacterTab(data);
        SetKnowledgeTab(data);
    }

    private void SetCharacterTab(CharacterInfoSystem.CharacterData data)
    {
        var (entity, job, objectives, briefing, entityName, _) = data;

        CharacterTab.SpriteView.SetEntity(entity);

        UpdateRoleType();

        CharacterTab.NameLabel.Text = entityName;
        CharacterTab.SubText.Text = job;
        CharacterTab.Objectives.RemoveAllChildren();
        CharacterTab.ObjectivesLabel.Visible = objectives.Any();

        foreach (var (groupId, conditions) in objectives)
        {
            var objectiveControl = new CharacterObjectiveControl
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Modulate = Color.Gray
            };


            var objectiveText = new FormattedMessage();
            objectiveText.TryAddMarkup(groupId, out _);

            var objectiveLabel = new RichTextLabel
            {
                StyleClasses = { StyleNano.StyleClassTooltipActionTitle }
            };
            objectiveLabel.SetMessage(objectiveText);

            objectiveControl.AddChild(objectiveLabel);

            foreach (var condition in conditions)
            {
                var conditionControl = new ObjectiveConditionsControl();
                conditionControl.ProgressTexture.Texture = _sprite.Frame0(condition.Icon);
                conditionControl.ProgressTexture.Progress = condition.Progress;
                var titleMessage = new FormattedMessage();
                var descriptionMessage = new FormattedMessage();
                titleMessage.AddText(condition.Title);
                descriptionMessage.AddText(condition.Description);

                conditionControl.Title.SetMessage(titleMessage);
                conditionControl.Description.SetMessage(descriptionMessage);

                objectiveControl.AddChild(conditionControl);
            }

            CharacterTab.Objectives.AddChild(objectiveControl);
        }

        if (briefing != null)
        {
            var briefingControl = new ObjectiveBriefingControl();
            var text = new FormattedMessage();
            text.PushColor(Color.Yellow);
            text.AddText(briefing);
            briefingControl.Label.SetMessage(text);
            CharacterTab.Objectives.AddChild(briefingControl);
        }

        var controls = _characterInfo.GetCharacterInfoControls(entity);
        foreach (var control in controls)
        {
            CharacterTab.Objectives.AddChild(control);
        }

        CharacterTab.RolePlaceholder.Visible = briefing == null && !controls.Any() && !objectives.Any();
    }

    private void SetKnowledgeTab(CharacterInfoSystem.CharacterData data)
    {
        var (_, _, _, _, _, knowledge) = data;

        KnowledgeTab.Knowledge.RemoveAllChildren();
        KnowledgeTab.KnowledgePlaceholder.Visible = knowledge.Any();

        foreach (var (groupId, conditions) in knowledge)
        {
            var objectiveControl = new CharacterKnowledgeControl()
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Modulate = Color.Gray
            };


            var objectiveText = new FormattedMessage();
            objectiveText.TryAddMarkup(groupId, out _);

            var objectiveLabel = new RichTextLabel
            {
                StyleClasses = { StyleNano.StyleClassTooltipActionTitle }
            };
            objectiveLabel.SetMessage(objectiveText);

            objectiveControl.AddChild(objectiveLabel);

            foreach (var condition in conditions)
            {
                var conditionControl = new KnowledgeEntryControl();
                if (condition.Sprite != null)
                    conditionControl.Texture.Texture = _sprite.Frame0(condition.Sprite);
                var titleMessage = new FormattedMessage();
                var descriptionMessage = new FormattedMessage();

                titleMessage.AddText(condition.Name);
                descriptionMessage.AddText(condition.Description);

                conditionControl.Title.SetMessage(titleMessage);
                conditionControl.Description.SetMessage(descriptionMessage);

                objectiveControl.AddChild(conditionControl);
            }

            KnowledgeTab.Knowledge.AddChild(objectiveControl);
        }

        KnowledgeTab.KnowledgePlaceholder.Visible = !knowledge.Any();
    }

    public void UpdateRoleType()
    {
        if (CharacterTab == null || Tabs.CurrentTab != 0)
            return;

        if (!_ent.TryGetComponent<MindContainerComponent>(_player.LocalEntity, out var container)
            || container.Mind is null)
            return;

        if (!_ent.TryGetComponent<MindComponent>(container.Mind.Value, out var mind))
            return;

        if (!_prototypeManager.TryIndex(mind.RoleType, out var proto))
            Logger.Error($"Player '{_player.LocalSession}' has invalid Role Type '{mind.RoleType}'. Displaying default instead");

        CharacterTab.RoleType.Text = Loc.GetString(proto?.Name ?? "role-type-crew-aligned-name");
        CharacterTab.RoleType.FontColorOverride = proto?.Color ?? Color.White;
    }
}
