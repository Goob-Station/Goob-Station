// SPDX-FileCopyrightText: 2022 ShadowCommander <10494922+ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 mirrorcult <lunarautomaton6@gmail.com>
// SPDX-FileCopyrightText: 2023 Leon Friedrich <60421075+ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 Visne <39844191+Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Numerics;
using Content.Client.ContextMenu.UI;
using Content.Shared.Verbs;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.Verbs.UI
{
    /// <summary>
    ///     Slight extension of <see cref="ContextMenuElement"/> that uses a SpriteSpecifier for it's icon and provides
    ///     constructors that take verbs or verb categories.
    /// </summary>
    public sealed partial class VerbMenuElement : ContextMenuElement
    {
        public const string StyleClassVerbMenuConfirmationTexture = "verbMenuConfirmationTexture";

        // Setters to provide access to children generated by XAML.
        public bool IconVisible { set => Icon.Visible = value; }
        public bool TextVisible { set => Label.Visible = value; }

        // Top quality variable naming
        public readonly Verb? Verb;

        public VerbMenuElement(Verb verb) : base(verb.Text)
        {
            ToolTip = verb.Message;
            Disabled = verb.Disabled;
            Verb = verb;

            Label.SetOnlyStyleClass(verb.TextStyleClass);

            // There are no confirmations in debug fam.
#if !DEBUG
            if (verb.ConfirmationPopup)
            {
                ExpansionIndicator.SetOnlyStyleClass(StyleClassVerbMenuConfirmationTexture);
                ExpansionIndicator.Visible = true;
            }
#endif

            var entManager = IoCManager.Resolve<IEntityManager>();

            if (verb.Icon == null && verb.IconEntity != null)
            {
                var spriteView = new SpriteView()
                {
                    OverrideDirection = Direction.South,
                    SetSize = new Vector2(ElementHeight, ElementHeight),
                };
                spriteView.SetEntity(entManager.GetEntity(verb.IconEntity.Value));

                Icon.AddChild(spriteView);
                return;
            }

            Icon.AddChild(new TextureRect()
            {
                Texture = verb.Icon != null ? entManager.System<SpriteSystem>().Frame0(verb.Icon) : null,
                Stretch = TextureRect.StretchMode.KeepAspectCentered
            });
        }

        public VerbMenuElement(VerbCategory category, string styleClass) : base(category.Text)
        {
            Label.SetOnlyStyleClass(styleClass);

            Icon.AddChild(new TextureRect()
            {
                Texture = category.Icon != null ? IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>().Frame0(category.Icon) : null,
                Stretch = TextureRect.StretchMode.KeepAspectCentered
            });
        }
    }
}