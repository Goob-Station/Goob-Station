using Robust.Client.UserInterface;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared._CorvaxNext.Silicons.Borgs.Components;

namespace Content.Client._CorvaxNext.Silicons.Laws.Ui
{
    [GenerateTypedNameReferences]
    public sealed partial class RemoteDeviceDisplay : Control
    {
        public event Action<RemoteDeviceActionEvent>? OnRemoteDeviceAction;
        public RemoteDeviceDisplay(NetEntity netEntityUid, String diplayName)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            DeviceName.SetMessage(diplayName);

            MoveButton.OnPressed += _ =>
            {
                OnRemoteDeviceAction?.Invoke(new RemoteDeviceActionEvent(RemoteDeviceActionEvent.RemoteDeviceActionType.MoveToDevice, netEntityUid));
            };

            TakeControlButton.OnPressed += _ =>
            {
                OnRemoteDeviceAction?.Invoke(new RemoteDeviceActionEvent(RemoteDeviceActionEvent.RemoteDeviceActionType.TakeControl, netEntityUid));
            };
        }
    }
}
