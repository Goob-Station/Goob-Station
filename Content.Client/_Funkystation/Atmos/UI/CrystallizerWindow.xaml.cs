using Content.Shared._Funkystation.Atmos.Prototypes;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Content.Shared.Atmos;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using System.Numerics;
using System.Linq;

namespace Content.Client._Funkystation.Atmos.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CrystallizerWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public bool Active = true;
        private Button? _selectedButton;
        private string? _selectedButtonId;
        private Button _nothingButton = new Button();
        private readonly Dictionary<Button, string?> _buttonToRecipeId = new();
        private GasMixture? _gasMixture;
        private float _progressFillPercentage = 0f;
        public event Action<Button, string?>? OnRecipeButtonPressed;
        public event Action<float>? OnGasInputChanged;

        private const float MinDeviationRate = 0.90f;
        private const float MaxDeviationRate = 1.10f;

        public CrystallizerWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            InitializeRecipeButtons();

            GasInput.OnValueChanged += args => OnGasInputChanged?.Invoke(Math.Clamp(args.Value, 0f, 250f));
        }

        public void SetActive(bool active)
        {
            Active = active;
            if (active)
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-thermomachine-ui-status-enabled");
                ToggleStatusButton.Pressed = true;
            }
            else
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
                ToggleStatusButton.Pressed = false;
            }
        }

        public void SetGasMixture(GasMixture? mixture)
        {
            _gasMixture = mixture;
            if (_selectedButton != null)
            {
                CrystallizerRecipePrototype? recipe = null;
                if (_selectedButtonId != null && _prototypeManager.TryIndex<CrystallizerRecipePrototype>(_selectedButtonId, out var proto))
                {
                    recipe = proto;
                }
                SelectRecipeButton(_selectedButton, recipe);
                SetTemperatureBar(mixture, recipe);
            }
        }

        public void SetProgressBar(float progressBar)
        {
            _progressFillPercentage = Math.Clamp(progressBar / 100f, 0f, 1f);
            FillProgressBar(_progressFillPercentage);
        }

        public void FillProgressBar(float progressFillPercentage)
        {
            if (progressFillPercentage < 0.0001f)
            {
                ProgressBarPanel.MinSize = new Vector2(0, 20);
                return;
            }

            var parentContainer = ProgressBarPanel.Parent?.Parent as PanelContainer;
            if (parentContainer != null)
            {
                float parentWidth = parentContainer.Size.X;
                float targetWidth = parentWidth * progressFillPercentage;

                ProgressBarPanel.MinSize = new Vector2(targetWidth, 20);
            }
        }

        private void SetTemperatureBar(GasMixture? mixture, CrystallizerRecipePrototype? recipe)
        {
            if (recipe == null || mixture == null || mixture.TotalMoles <= 0)
            {
                TemperatureBarPanel.MinSize = new Vector2(0, 20);
                TemperatureBarPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.White };
                return;
            }

            float temperature = mixture.Temperature;
            float minTemp = recipe.MinimumTemperature;
            float maxTemp = recipe.MaximumTemperature;
            float minRange = minTemp * MinDeviationRate;
            float maxRange = maxTemp * MaxDeviationRate;
            float medianTemp = (minTemp + maxTemp) / 2f;
            float optimalMin = medianTemp * MinDeviationRate;
            float optimalMax = medianTemp * MaxDeviationRate;

            float fillPercentage = Math.Clamp((temperature - minRange) / (maxRange - minRange), 0f, 1f);

            Color barColor;
            if (temperature >= minRange && temperature <= minTemp ||
                temperature >= maxTemp && temperature <= maxRange ||
                temperature >= maxRange)
            {
                barColor = Color.Red;
            }
            else if (temperature >= optimalMin && temperature <= optimalMax)
            {
                barColor = Color.Green;
            }
            else
            {
                barColor = Color.White;
            }

            var parentContainer = TemperatureBarPanel.Parent?.Parent as PanelContainer;
            if (parentContainer != null)
            {
                float parentWidth = parentContainer.Size.X;
                float targetWidth = (parentWidth - 2) * fillPercentage;
                TemperatureBarPanel.MinSize = new Vector2(targetWidth, 18);
                TemperatureBarPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = barColor };
            }
        }

        private void InitializeRecipeButtons()
        {
            RecipesContainer.Children.Clear();
            _buttonToRecipeId.Clear();

            var orderedRecipeIds = new List<string>
            {
                "ammoniaCrystalRecipe",
                "metalHydrogenRecipe",
                "healiumCrystalRecipe",
                "protoNitrateCrystalRecipe",
                "supermatterSliverRecipe",
                "nitrousOxideCrystalRecipe",
                "diamondRecipe",
                "plasmaSheetRecipe",
                "crystalCellRecipe",
                "zaukeriteRecipe"
            };

            _nothingButton.Text = "Nothing";
            _nothingButton.HorizontalExpand = true;
            _nothingButton.Pressed = true;

            _nothingButton.OnPressed += _ =>
            {
                SelectRecipeButton(_nothingButton);
                OnRecipeButtonPressed?.Invoke(_nothingButton, null);
            };
            _selectedButton = _nothingButton;
            _selectedButtonId = null;
            _buttonToRecipeId[_nothingButton] = null;
            RecipesContainer.AddChild(_nothingButton);

            var allRecipes = _prototypeManager.EnumeratePrototypes<CrystallizerRecipePrototype>().ToList();
            var processedRecipeIds = new HashSet<string>();

            foreach (var recipeId in orderedRecipeIds)
            {
                var recipe = allRecipes.FirstOrDefault(r => r.ID == recipeId);
                if (recipe != null)
                {
                    var button = new Button
                    {
                        Text = recipe.Name,
                        HorizontalExpand = true
                    };

                    button.OnPressed += _ =>
                    {
                        SelectRecipeButton(button, recipe);
                        OnRecipeButtonPressed?.Invoke(button, recipe.ID);
                    };
                    _buttonToRecipeId[button] = recipe.ID;
                    RecipesContainer.AddChild(button);
                    processedRecipeIds.Add(recipe.ID);
                }
            }

            foreach (var recipe in allRecipes)
            {
                if (!processedRecipeIds.Contains(recipe.ID))
                {
                    var button = new Button
                    {
                        Text = recipe.Name,
                        HorizontalExpand = true
                    };

                    button.OnPressed += _ =>
                    {
                        SelectRecipeButton(button, recipe);
                        OnRecipeButtonPressed?.Invoke(button, recipe.ID);
                    };
                    _buttonToRecipeId[button] = recipe.ID;
                    RecipesContainer.AddChild(button);
                    processedRecipeIds.Add(recipe.ID);
                }
            }
        }

        public void SelectRecipeById(string? recipeId)
        {
            Button button = _nothingButton;
            CrystallizerRecipePrototype? recipe = null;

            foreach (var (btn, id) in _buttonToRecipeId)
            {
                if (Equals(id, recipeId))
                {
                    button = btn;
                    if (recipeId != null && _prototypeManager.TryIndex<CrystallizerRecipePrototype>(recipeId, out var proto))
                    {
                        recipe = proto;
                    }
                    break;
                }
            }

            SelectRecipeButton(button, recipe);
        }

        private void SelectRecipeButton(Button button, CrystallizerRecipePrototype? recipe = null)
        {
            if (_selectedButton != null)
            {
                _selectedButton.Pressed = false;
            }
            _selectedButton = button;
            _selectedButton.Pressed = true;
            _selectedButtonId = _buttonToRecipeId[button];

            RequirementsContainer.Children.Clear();

            if (recipe == null)
            {
                var selectMessage = new Label { Text = "Please select a recipe." };
                RequirementsContainer.AddChild(selectMessage);
                GasList.Children.Clear();
                return;
            }

            var label = new Label { Text = $"Temperature:" };
            RequirementsContainer.AddChild(label);
            label = new Label { Text = $" - Minimum: {recipe.MinimumTemperature}K" };
            RequirementsContainer.AddChild(label);
            label = new Label { Text = $" - Maximum: {recipe.MaximumTemperature}K" };
            RequirementsContainer.AddChild(label);

            label = new Label { Text = $"Gases:" };
            RequirementsContainer.AddChild(label);
            for (int i = 0; i < recipe.MinimumRequirements.Length && i < Atmospherics.TotalNumberOfGases; i++)
            {
                if (recipe.MinimumRequirements[i] > 0)
                {
                    var gas = (Gas) i;
                    if (Atmospherics.GasNames.TryGetValue(gas, out var gasName))
                    {
                        var gasLabel = new Label { Text = $" - {gasName}: {recipe.MinimumRequirements[i]} moles" };
                        RequirementsContainer.AddChild(gasLabel);
                    }
                }
            }

            label = new Label { Text = $" " };
            RequirementsContainer.AddChild(label);
            label = new Label { Text = recipe.EnergyRelease > 0 ? "This reaction will be exothermic." : "This reaction will be endothermic." };
            RequirementsContainer.AddChild(label);

            // Update GasList
            GasList.Children.Clear();
            if (recipe == null)
                return;

            int index = 0;
            for (int i = 0; i < recipe.MinimumRequirements.Length && i < Atmospherics.TotalNumberOfGases; i++)
            {
                if (recipe.MinimumRequirements[i] > 0)
                {
                    var gas = (Gas) i;
                    if (Atmospherics.GasNames.TryGetValue(gas, out var gasName))
                    {

                        var gasContainer = new BoxContainer
                        {
                            Orientation = BoxContainer.LayoutOrientation.Horizontal,
                            HorizontalExpand = true
                        };

                        var moles = _gasMixture != null ? _gasMixture.GetMoles(i) : 0f;
                        var gasLabel = new Label { Text = gasName, Margin = new Thickness(5) };
                        var gasControl = new Control { HorizontalExpand = true };
                        var molesLabel = new Label { Text = $"{moles:F2} moles", Margin = new Thickness(5) };

                        gasContainer.AddChild(gasLabel);
                        gasContainer.AddChild(gasControl);
                        gasContainer.AddChild(molesLabel);

                        var panel = new PanelContainer
                        {
                            Children = { gasContainer },
                            HorizontalExpand = true
                        };

                        var backgroundColor = (index % 2 == 0) ? Color.FromHex("#222222") : Color.FromHex("#2F2F38");
                        panel.PanelOverride = new StyleBoxFlat { BackgroundColor = backgroundColor };

                        GasList.AddChild(panel);
                        index++;
                    }
                }
            }

            SetTemperatureBar(_gasMixture, recipe);
        }
    }
}
