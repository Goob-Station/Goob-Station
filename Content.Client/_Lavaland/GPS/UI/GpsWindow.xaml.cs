using System.Globalization;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using System.Numerics;
using Content.Shared._Lavaland.GPS;
using Robust.Client.Utility;
using Robust.Shared.Graphics.RSI;
using Robust.Shared.Input;

namespace Content.Client._Lavaland.GPS.UI;

[GenerateTypedNameReferences]
public sealed partial class GpsWindow : FancyWindow
{
    [Dependency] private readonly IComponentFactory _factory = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    public event Action? OnRequestRefresh;
    public event Action<GpsRefreshType>? OnChangeScanMode;
    public event Action<GpsRangeType>? OnChangeRangeMode;

    private readonly StyleBoxFlat _style = new() { BackgroundColor = new Color(70, 73, 102) };
    private readonly StyleBoxFlat _styleBroke = new() { BackgroundColor = Color.FromHex("#303133") };
    private readonly List<ListContainerButton> _buttons = new();

    private Vector2 _localPosition = Vector2.Zero;

    public GpsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        DisplayedSignals.SearchBar = SearchBar;
        DisplayedSignals.DataFilterCondition += DataFilterCondition;
        DisplayedSignals.GenerateItem += GenerateButton;

        RefreshButton.OnPressed += _ => OnRequestRefresh?.Invoke();

        RangeMode.AddItem(Loc.GetString("gps-ui-range-low"), (int) GpsRangeType.Low);
        RangeMode.AddItem(Loc.GetString("gps-ui-range-mediun"), (int) GpsRangeType.Medium);
        RangeMode.AddItem(Loc.GetString("gps-ui-range-high"), (int) GpsRangeType.High);
        RangeMode.AddItem(Loc.GetString("gps-ui-range-max"), (int) GpsRangeType.Max);
        RangeMode.SelectId((int) GpsRangeType.Medium);
        RangeMode.OnItemSelected += args => ChangeRangeMode(args.Id);

        ScanMode.AddItem(Loc.GetString("gps-ui-mode-auto"), (int) GpsRefreshType.Auto);
        ScanMode.AddItem(Loc.GetString("gps-ui-mode-manual"), (int) GpsRefreshType.Manual);
        ScanMode.SelectId((int) GpsRefreshType.Manual);
        ScanMode.OnItemSelected += args => ChangeScanMode(args.Id);
    }

    public void UpdateState(GpsSignalLocatorState state)
    {
        _localPosition = state.LocatorPosition.Item1;
        // Yes, currently it shows MapId instead of actual Z-level. Sad
        LocalPosition.Text = $"X: {_localPosition.X}, Y: {_localPosition.Y}, Z: {state.LocatorPosition.Item2}";
        Populate(state.Signals);
    }

    private bool DataFilterCondition(string filter, ListData data)
    {
        if (data is not GpsListingData { Name: var text })
            return false;

        if (string.IsNullOrEmpty(filter))
            return true;

        return text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
    }

    private void GenerateButton(ListData data, ListContainerButton button)
    {
        if (data is not GpsListingData cast)
            return;

        // Get arrow direction
        var vector = cast.Coordinates.Item1 - _localPosition;
        var angle = vector.ToWorldAngle();
        var direction = angle.ToRsiDirection(RsiDirectionType.Dir8);

        _buttons.Add(button);
        button.AddChild(new GpsItem(cast.Name, cast.Coordinates, direction));

        button.ToolTip = cast.Name;
        button.StyleBoxOverride = button.Disabled ? _styleBroke : _style;
    }

    private void Populate(List<LavalandSignal> listings)
    {
        var listData = new List<GpsListingData>();
        foreach (var listing in listings)
        {
            var name = listing.Name;
            var mapId = listing.MapId.ToString();
            var coords = (listing.Position, mapId);

            listData.Add(new GpsListingData(name, coords));
        }

        _buttons.Clear();
        DisplayedSignals.PopulateList(listData);
    }

    private void ChangeRangeMode(int rangeType)
    {
        RangeMode.SelectId(rangeType);
        switch (rangeType)
        {
            case (int) GpsRangeType.Low:
                OnChangeRangeMode?.Invoke(GpsRangeType.Low);
                break;
            case (int) GpsRangeType.Medium:
                OnChangeRangeMode?.Invoke(GpsRangeType.Medium);
                break;
            case (int) GpsRangeType.High:
                OnChangeRangeMode?.Invoke(GpsRangeType.High);
                break;
            case (int) GpsRangeType.Max:
                OnChangeRangeMode?.Invoke(GpsRangeType.Max);
                break;
        }
    }

    private void ChangeScanMode(int modeType)
    {
        ScanMode.SelectId(modeType);
        switch (modeType)
        {
            case (int) GpsRefreshType.Auto:
                OnChangeScanMode?.Invoke(GpsRefreshType.Auto);
                break;
            case (int) GpsRefreshType.Manual:
                OnChangeScanMode?.Invoke(GpsRefreshType.Manual);
                break;
        }
    }
}

public record GpsListingData(string Name, (Vector2i, string) Coordinates) : ListData;
