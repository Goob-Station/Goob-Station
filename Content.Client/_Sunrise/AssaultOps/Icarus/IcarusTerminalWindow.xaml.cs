using Content.Shared._Sunrise.AssaultOps.Icarus;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Sunrise.AssaultOps.Icarus;

[GenerateTypedNameReferences]
public sealed partial class IcarusTerminalWindow : DefaultWindow
{
    public event Action? FireButtonPressed;

    public IcarusTerminalWindow()
    {
        RobustXamlLoader.Load(this);

        FireButton.OnPressed += _ => FireButtonPressed?.Invoke();
    }

    public void UpdateState(IcarusTerminalUiState state)
    {
        FireButton.Disabled = state.Status != IcarusTerminalStatus.FIRE_READY;
        TimerBox.Visible = state.Status == IcarusTerminalStatus.FIRE_PREPARING;
        CooldownBox.Visible = state.Status == IcarusTerminalStatus.COOLDOWN;

        switch (state.Status)
        {
            case IcarusTerminalStatus.FIRE_PREPARING:
                TimerValue.Text = state.RemainingTime.ToString();
                break;
            case IcarusTerminalStatus.COOLDOWN:
                CooldownValue.Text = state.CooldownTime.ToString();
                break;
        }
    }
}
