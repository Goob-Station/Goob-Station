// SPDX-FileCopyrightText: 2019 Ephememory <yetanotherscuffed@gmail.com>
// SPDX-FileCopyrightText: 2019 Pieter-Jan Briers <pieterjan.briers@gmail.com>
// SPDX-FileCopyrightText: 2019 Silver <Silvertorch5@gmail.com>
// SPDX-FileCopyrightText: 2019 ZelteHonor <gabrieldionbouchard@gmail.com>
// SPDX-FileCopyrightText: 2019 moneyl <8206401+Moneyl@users.noreply.github.com>
// SPDX-FileCopyrightText: 2020 AJCM-git <60196617+AJCM-git@users.noreply.github.com>
// SPDX-FileCopyrightText: 2020 Clyybber <darkmine956@gmail.com>
// SPDX-FileCopyrightText: 2020 Exp <theexp111@gmail.com>
// SPDX-FileCopyrightText: 2020 Git-Nivrak <59925169+Git-Nivrak@users.noreply.github.com>
// SPDX-FileCopyrightText: 2020 ShadowCommander <10494922+ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 2020 VÃ­ctor Aguilera Puerto <6766154+Zumorica@users.noreply.github.com>
// SPDX-FileCopyrightText: 2020 zumorica <zddm@outlook.es>
// SPDX-FileCopyrightText: 2021 Acruid <shatter66@gmail.com>
// SPDX-FileCopyrightText: 2021 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 2021 Galactic Chimp <63882831+GalacticChimp@users.noreply.github.com>
// SPDX-FileCopyrightText: 2021 Paul <ritter.paul1+git@googlemail.com>
// SPDX-FileCopyrightText: 2021 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 2021 Vera Aguilera Puerto <6766154+Zumorica@users.noreply.github.com>
// SPDX-FileCopyrightText: 2021 Visne <39844191+Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 Paul Ritter <ritter.paul1@googlemail.com>
// SPDX-FileCopyrightText: 2022 mirrorcult <lunarautomaton6@gmail.com>
// SPDX-FileCopyrightText: 2022 wrexbe <81056464+wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Artjom <artjombebenin@gmail.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 metalgearsloth <comedian_vs_clown@hotmail.com>
// SPDX-FileCopyrightText: 2024 qwerltaz <69696513+qwerltaz@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;


namespace Content.Client.Construction.UI
{
    /// <summary>
    /// This is the interface for a UI View of the construction window. The point of it is to abstract away the actual
    /// UI controls and just provide higher level operations on the entire window. This View is completely passive and
    /// just raises events to the outside world. This class is controlled by the <see cref="ConstructionMenuPresenter"/>.
    /// </summary>
    public interface IConstructionMenuView : IDisposable
    {
        // It isn't optimal to expose UI controls like this, but the UI control design is
        // questionable so it can't be helped.
        string[] Categories { get; set; }
        OptionButton OptionCategories { get; }

        bool EraseButtonPressed { get; set; }
        bool GridViewButtonPressed { get; set; }
        bool BuildButtonPressed { get; set; }

        ItemList Recipes { get; }
        ItemList RecipeStepList { get; }


        ScrollContainer RecipesGridScrollContainer { get; }
        GridContainer RecipesGrid { get; }

        event EventHandler<(string search, string catagory)> PopulateRecipes;
        event EventHandler<ItemList.Item?> RecipeSelected;
        event EventHandler RecipeFavorited;
        event EventHandler<bool> BuildButtonToggled;
        event EventHandler<bool> EraseButtonToggled;
        event EventHandler ClearAllGhosts;

        void ClearRecipeInfo();
        void SetRecipeInfo(string name, string description, Texture iconTexture, bool isItem, bool isFavorite);
        void ResetPlacement();

        #region Window Control

        event Action? OnClose;

        bool IsOpen { get; }

        void OpenCentered();
        void MoveToFront();
        bool IsAtFront();
        void Close();

        #endregion
    }

    [GenerateTypedNameReferences]
    public sealed partial class ConstructionMenu : DefaultWindow, IConstructionMenuView
    {
        public bool BuildButtonPressed
        {
            get => BuildButton.Pressed;
            set => BuildButton.Pressed = value;
        }

        public string[] Categories { get; set; } = Array.Empty<string>();

        public bool EraseButtonPressed
        {
            get => EraseButton.Pressed;
            set => EraseButton.Pressed = value;
        }

        public bool GridViewButtonPressed
        {
            get => MenuGridViewButton.Pressed;
            set => MenuGridViewButton.Pressed = value;
        }

        public ConstructionMenu()
        {
            SetSize = new Vector2(560, 450);
            MinSize = new Vector2(560, 320);

            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Title = Loc.GetString("construction-menu-title");

            BuildButton.Text = Loc.GetString("construction-menu-place-ghost");
            Recipes.OnItemSelected += obj => RecipeSelected?.Invoke(this, obj.ItemList[obj.ItemIndex]);
            Recipes.OnItemDeselected += _ => RecipeSelected?.Invoke(this, null);

            SearchBar.OnTextChanged += _ =>
                PopulateRecipes?.Invoke(this, (SearchBar.Text, Categories[OptionCategories.SelectedId]));
            OptionCategories.OnItemSelected += obj =>
            {
                OptionCategories.SelectId(obj.Id);
                SearchBar.SetText(string.Empty);
                PopulateRecipes?.Invoke(this, (SearchBar.Text, Categories[obj.Id]));
            };

            BuildButton.Text = Loc.GetString("construction-menu-place-ghost");
            BuildButton.OnToggled += args => BuildButtonToggled?.Invoke(this, args.Pressed);
            ClearButton.Text = Loc.GetString("construction-menu-clear-all");
            ClearButton.OnPressed += _ => ClearAllGhosts?.Invoke(this, EventArgs.Empty);
            EraseButton.Text = Loc.GetString("construction-menu-eraser-mode");
            EraseButton.OnToggled += args => EraseButtonToggled?.Invoke(this, args.Pressed);

            FavoriteButton.OnPressed += args => RecipeFavorited?.Invoke(this, EventArgs.Empty);

            MenuGridViewButton.OnPressed += _ =>
                PopulateRecipes?.Invoke(this, (SearchBar.Text, Categories[OptionCategories.SelectedId]));
        }

        public event EventHandler? ClearAllGhosts;
        public event EventHandler<(string search, string catagory)>? PopulateRecipes;
        public event EventHandler<ItemList.Item?>? RecipeSelected;
        public event EventHandler? RecipeFavorited;
        public event EventHandler<bool>? BuildButtonToggled;
        public event EventHandler<bool>? EraseButtonToggled;

        public void ResetPlacement()
        {
            BuildButton.Pressed = false;
            EraseButton.Pressed = false;
        }

        public void SetRecipeInfo(
            string name, string description, Texture iconTexture, bool isItem, bool isFavorite)
        {
            BuildButton.Disabled = false;
            BuildButton.Text = Loc.GetString(isItem ? "construction-menu-place-ghost" : "construction-menu-craft");
            TargetName.SetMessage(name);
            TargetDesc.SetMessage(description);
            TargetTexture.Texture = iconTexture;
            FavoriteButton.Visible = true;
            FavoriteButton.Text = Loc.GetString(
                            isFavorite ? "construction-add-favorite-button" : "construction-remove-from-favorite-button");
        }

        public void ClearRecipeInfo()
        {
            BuildButton.Disabled = true;
            TargetName.SetMessage(string.Empty);
            TargetDesc.SetMessage(string.Empty);
            TargetTexture.Texture = null;
            FavoriteButton.Visible = false;
            RecipeStepList.Clear();
        }
    }
}