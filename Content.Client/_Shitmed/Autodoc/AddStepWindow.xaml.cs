using Content.Client.UserInterface.Controls;
using Content.Shared.Administration;
using Content.Shared._Shitmed.Autodoc;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Shitmed.Autodoc;

[GenerateTypedNameReferences]
public sealed partial class AddStepWindow : FancyWindow
{
    public event Action<IAutodocStep>? OnAddStep;

    private PickSurgeryWindow? _surgery;
    private DialogWindow? _grab;

    public AddStepWindow()
    {
        RobustXamlLoader.Load(this);

        // close the window once any step is added
        OnAddStep += _ => Close();

        OnClose += () =>
        {
            _surgery?.Close();
            _grab?.Close();
        };

        // dedicated ui to pick the enum values and surgery type
        SurgeryButton.OnPressed += _ =>
        {
            if (_surgery is {} window)
            {
                window.MoveToFront();
                return;
            }

            _surgery = new PickSurgeryWindow();
            _surgery.OnAddStep += step => OnAddStep?.Invoke(step);
            _surgery.OnClose += () => _surgery = null;
            _surgery.OpenCentered();
        };

        // just picking a string, use a dialog
        GrabItemButton.OnPressed += _ =>
        {
            if (_grab is {} dialog)
            {
                dialog.MoveToFront();
                return;
            }

            var field = "name";
            var prompt = Loc.GetString("autodoc-add-step-grab-item-prompt");
            var placeholder = Loc.GetString("autodoc-add-step-grab-item-placeholder");
            var entry = new QuickDialogEntry(field, QuickDialogEntryType.ShortText, prompt, placeholder);
            var entries = new List<QuickDialogEntry> { entry };
            _grab = new DialogWindow(GrabItemButton.Text!, entries);
            _grab.OnConfirmed += responses =>
            {
                var name = responses[field].Trim();
                if (name.Length < 1 || name.Length > 100)
                    return;

                OnAddStep?.Invoke(new GrabItemAutodocStep()
                {
                    Name = name
                });
            };
            _grab.OnClose += () => _grab = null;
        };

        // no arguments so these are trivial
        GrabOrganButton.OnPressed += _ => OnAddStep?.Invoke(new GrabAnyOrganAutodocStep());
        GrabPartButton.OnPressed += _ => OnAddStep?.Invoke(new GrabAnyBodyPartAutodocStep());
        StoreItemButton.OnPressed += _ => OnAddStep?.Invoke(new StoreItemAutodocStep());
    }
}
