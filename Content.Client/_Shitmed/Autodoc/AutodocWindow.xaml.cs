using Content.Client.UserInterface.Controls;
using Content.Shared._Shitmed.Autodoc;
using Content.Shared._Shitmed.Autodoc.Components;
using Content.Shared._Shitmed.Autodoc.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Shitmed.Autodoc;

[GenerateTypedNameReferences]
public sealed partial class AutodocWindow : FancyWindow
{
    private IEntityManager _entMan;
    private IPlayerManager _player;
    private SharedAutodocSystem _autodoc;

    private EntityUid _owner;
    private bool _active;

    public event Action? OnCreateProgram;
    public event Action<int>? OnToggleProgramSafety;
    public event Action<int>? OnRemoveProgram;
    public event Action<int, IAutodocStep>? OnAddStep;
    public event Action<int, int>? OnRemoveStep;
    public event Action<int>? OnStart;
    public event Action? OnStop;

    public AutodocWindow(EntityUid owner, IEntityManager entMan, IPlayerManager player)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _entMan = entMan;
        _player = player;
        _autodoc = entMan.System<SharedAutodocSystem>();

        _owner = owner;

        CreateProgramButton.OnPressed += _ => OnCreateProgram?.Invoke();

        AbortButton.AddStyleClass("Caution");
        AbortButton.OnPressed += _ => OnStop?.Invoke();

        UpdateActive();
        UpdatePrograms();
    }

    public void UpdateActive()
    {
        // UI must be in the inactive state by default, since this wont run when inactive at startup
        var active = _entMan.HasComponent<ActiveAutodocComponent>(_owner);
        if (active == _active)
            return;

        CreateProgramButton.Disabled = active;
        AbortButton.Disabled = !active;
        foreach (var button in Programs.Children)
        {
            ((Button) button).Disabled = active;
        }
    }

    private void UpdatePrograms()
    {
        if (!_entMan.TryGetComponent<AutodocComponent>(_owner, out var comp))
            return;

        Programs.RemoveAllChildren();
        for (int i = 0; i < comp.Programs.Count; i++)
        {
            var button = new Button()
            {
                Text = $"Program {i}"
            };
            var index = i;
            button.OnPressed += _ => OpenProgram(index);
            Programs.AddChild(button);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateActive();
        UpdatePrograms();
    }
}
