using Content.Client.UserInterface.Controls;
using Content.Shared._Shitmed.Autodoc;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Shitmed.Autodoc;

[GenerateTypedNameReferences]
public sealed partial class AutodocProgramWindow : FancyWindow
{
    public event Action? OnToggleSafety;
    public event Action? OnRemoveProgram;
    public event Action<IAutodocStep>? OnAddStep;
    public event Action<int>? OnRemoveStep;
    public event Action? OnStart;

    private AutodocProgram _program;
    private int _steps;
    private bool _safety = true;

    private int? _selected;

    public AutodocProgramWindow(AutodocProgram program)
    {
        RobustXamlLoader.Load(this);

        _program = program;

        SafetyButton.OnPressed += _ =>
        {
            OnToggleSafety?.Invoke();
            program.SkipFailed ^= true;
            UpdateSafety();
        };
        UpdateSafety();

        RemoveButton.OnPressed += _ =>
        {
            OnRemoveProgram?.Invoke();
            Close();
        };

        RemoveStepButton.OnPressed += _ =>
        {
            if (_selected is not {} index)
                return;

            _selected = null;
            OnRemoveStep?.Invoke(index);
            Steps.RemoveChild(index);
        };

        StartButton.OnPressed += _ =>
        {
            OnStart?.Invoke();
            Close();
        };

        Steps.OnItemSelected += args =>
        {
            _selected = args.ItemIndex;
            RemoveStepButton.Disabled = false;
        };
        Steps.OnItemDeselected += _ =>
        {
            _selected = null;
            RemoveStepButton.Disabled = true;
        };

        UpdateSteps();
        UpdateSafety();
    }

    private void UpdateSafety()
    {
        var safety = !_program.SkipFailed;
        if (safety == _safety)
            return;

        _safety = safety;

        SafetyButton.Text = Loc.GetString("autodoc-safety-" + (safety ? "enabled" : "disabled"));
        if (safety)
            SafetyButton.RemoveStyleClass("Caution");
        else
            SafetyButton.AddStyleClass("Caution");
    }

    private void UpdateSteps()
    {
        var count = _program.Steps.Count;
        if (_steps == count)
            return;

        _steps = count;

        Steps.RemoveAllChildren();

        for (int i = 0; i < count; i++)
        {
            Steps.AddItem(_program.Steps[i].Title);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateSteps();
        UpdateSafety();
    }
}
