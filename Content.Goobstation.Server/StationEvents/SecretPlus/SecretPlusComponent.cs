// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 Ilya246 <57039557+Ilya246@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Ilya246 <ilyukarno@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Goobstation.Common.StationEvents.SecretPlus;
using Content.Shared.Random;
using Robust.Shared.Prototypes;
using Robust.Shared.Serialization.TypeSerializers.Implementations.Custom;

namespace Content.Goobstation.Server.StationEvents.SecretPlus;

/// <summary>
///   Basic metric-based event scheduler.
///   Maintains a "chaos score", which is a number used to pick what events are rolled.
///   Events are weighted by their normal weight and by roughly how close they are to (the negative of) the current chaos score.
///   Chaos is passively generated by players, degenerated by ghosts, and changed by fired events' chaos scores.
///   For more information, see the summaries of the fields.
/// </summary>
[RegisterComponent, AutoGenerateComponentPause, Access(typeof(SecretPlusSystem))]
public sealed partial class SecretPlusComponent : Component
{
    /// <summary>
    ///   How long until the next check for an event runs
    ///   Default value is how long until first event is allowed
    /// </summary>
    [DataField(customTypeSerializer: typeof(TimeOffsetSerializer)), AutoPausedField]
    public TimeSpan TimeNextEvent;

    /// <summary>
    ///   Minimum interval between events
    /// </summary>
    [DataField]
    public TimeSpan EventIntervalMin;

    /// <summary>
    ///   Maximum interval between events
    /// </summary>
    [DataField]
    public TimeSpan EventIntervalMax;

    /// <summary>
    ///   The current chaos score.
    ///   Lower (negative - so the number is actually higher) values will tend to spawn higher-impact events.
    ///   Can be and usually is negative.
    /// </summary>
    [DataField]
    public float ChaosScore = 0;

    /// <summary>
    ///   The minimum amount of chaos to generate at the start per player.
    ///   Normally used for roundstart antags, but will still generate if they are disabled and will then be spent on midround events.
    /// </summary>
    [DataField]
    public float MinStartingChaos;

    /// <summary>
    ///   The maximum amount of chaos to generate at the start per player.
    /// </summary>
    [DataField]
    public float MaxStartingChaos;

    /// <summary>
    ///   How much to change chaos per second per player in control of a humanoid.
    /// </summary>
    [DataField]
    public float LivingChaosChange;

    /// <summary>
    ///   How much to change chaos per second per player in control of a ghost which can return to a body.
    /// </summary>
    [DataField]
    public float DeadChaosChange;

    /// <summary>
    ///   Chaos change multiplier we're using.
    ///   Affects midround chaos generation over time.
    ///   Rolled randomly when starting the gamerule.
    /// </summary>
    [ViewVariables]
    public float ChaosChangeVariation = 1f;

    /// <summary>
    ///   Minimum ChaosChangeVariation to generate at the start.
    /// </summary>
    [DataField]
    public float ChaosChangeVariationMin = 1f;

    /// <summary>
    ///   Maximum ChaosChangeVariation to generate at the start.
    /// </summary>
    [DataField]
    public float ChaosChangeVariationMax = 1f;

    /// <summary>
    ///   How much to bias ChaosChangeVariation towards generating closer to 1.
    ///   Higher values mean it rolls closer to 1, lower values means it rolls farther from 1.
    /// </summary>
    [DataField]
    public float ChaosChangeVariationExponent = 2f;

    /// <summary>
    ///   How much to offset chaos of events upwards when picking events, after applying ChaosExponent.
    ///   Higher values equalise event chances, especially so for lower-chaos events. Makes them happen more frequently even at high chaos scores.
    /// </summary>
    [DataField]
    public float ChaosOffset = 50f;

    /// <summary>
    ///   Higher values make high-chaos events wait for more chaos before gaining significant probability.
    ///   Events' chaos score is raised to this power before being factored into calculations.
    /// </summary>
    [DataField]
    public float ChaosExponent = 1.1f;

    /// <summary>
    ///   Lower values make secret+ be more picky regarding event chaos.
    ///   Raise to increase randomness.
    /// </summary>
    [DataField]
    public float ChaosMatching = 1.8f;

    /// <summary>
    ///   Minimum value for event chaos to prevent absurdly low event probabilities, applied after ChaosOffset.
    ///   Don't change unless you have a good reason.
    /// </summary>
    [DataField]
    public float ChaosThreshold = 20f;

    /// <summary>
    ///   How much to ramp up per second.
    ///   Turns the scheduler into essentially the survival gamemode.
    ///   Linearly scales chaos point generation, event frequency, and reduces reoccurence delays.
    ///   For example, if you set this to 1/60, after 60 seconds chaos generation and event frequency will be doubled, and reoccurence delays halved.
    /// </summary>
    [DataField]
    public float SpeedRamping = 0f;

    /// <summary>
    ///   Does this round start with antags at all?
    /// </summary>
    [DataField]
    public bool NoRoundstartAntags = false;

    /// <summary>
    ///   Whether to ignore whether an event can actually currently run.
    ///   Will lead to events firing earlier than normal and several times even when normally limited.
    /// </summary>
    [DataField]
    public bool IgnoreTimings = false;

    /// <summary>
    ///   Whether to ignore incompatible roundstart antags. Also permits several of one antag.
    ///   Use if you want to allow really high amounts of roundstart antags.
    /// </summary>
    [DataField]
    public bool IgnoreIncompatible = false;

    /// <summary>
    ///   All the event types that are disallowed to run.
    /// </summary>
    [DataField]
    public HashSet<ProtoId<EventTypePrototype>> DisallowedEvents = new();

    /// <summary>
    ///   Cache for currently runnable events.
    /// </summary>
    [ViewVariables]
    public List<SelectedEvent> SelectedEvents = new();

    /// <summary>
    ///   Weight table for primary roundstart antags.
    /// </summary>
    [DataField]
    public ProtoId<WeightedRandomPrototype> PrimaryAntagsWeightTable = "SecretPlusPrimary";

    /// <summary>
    ///   Makes the primary antag gamerule be less likely to be skipped due to lacking chaos budget.
    ///   Say, if we have 400 chaos but are trying to roll a primary worth 800, normally we would skip it
    ///   with a 50% chance, but if this is 2, our effective chaos will be doubled, and the chance will be 100%.
    /// </summary>
    [DataField]
    public float PrimaryAntagChaosBias = 2f;

    /// <summary>
    ///   Weight table for roundstart antags picked after the primary.
    /// </summary>
    [DataField]
    public ProtoId<WeightedRandomPrototype> RoundStartAntagsWeightTable = "SecretPlus";
}
