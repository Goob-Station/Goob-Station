using Content.Client.UserInterface.Controls;
using Content.Shared.Storage;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Numerics;

namespace Content.Goobstation.Client.Augments;

[GenerateTypedNameReferences]
public sealed partial class AugmentToolPanelMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _ent = default!;

    public event Action<EntityUid?>? SendSwitchMessage;

    private EntityUid _owner;

    public AugmentToolPanelMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void SetEntity(EntityUid uid)
    {
        _owner = uid;
        Refresh();
    }

    public void Refresh()
    {
        if (!_ent.TryGetComponent<StorageComponent>(_owner, out var storage))
            return;

        foreach (var (entity, _) in storage.StoredItems)
        {
            var button = new RadialMenuTextureButtonWithSector()
            {
                SetSize = new Vector2(64f, 64f),
            };

            button.AddChild(new SpriteView(entity, _ent)
                {
                    Scale = new Vector2(3f, 3f),
                });
            Main.AddChild(button);

            button.OnButtonUp += _ =>
            {
                SendSwitchMessage?.Invoke(entity);
                Close();
            };
        }

        var nilButton = new RadialMenuTextureButtonWithSector()
        {
            SetSize = new Vector2(64f, 64f),
        };

        Main.AddChild(nilButton);

        nilButton.OnButtonUp += _ =>
        {
            SendSwitchMessage?.Invoke(null);
            Close();
        };
    }
}
