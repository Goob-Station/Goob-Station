using Content.Goobstation.Shared.GPS;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using Robust.Client.ResourceManagement;
using Content.Client.Resources;
using Robust.Shared.Map;
using Robust.Client.Player;
using System.Numerics;
using Content.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Timing;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Goobstation.Client.GPS;

[GenerateTypedNameReferences]
public sealed partial class GpsWindow : BaseWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    public event Action<NetEntity?>? TrackedEntitySelected;
    public event Action<string>? GpsNameChanged;
    public event Action<bool>? DistressPressed;

    private GpsBoundUserInterfaceState? _lastState;
    private Texture? _distressSprite;

    public GpsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _distressSprite = IoCManager.Resolve<IResourceCache>()
            .GetTexture("/Textures/_Goobstation/Interface/Emotes/surprised.png");

        ClearButton.OnPressed += _ => TrackedEntitySelected?.Invoke(null);
        GpsName.OnTextEntered += e => GpsNameChanged?.Invoke(e.Text);
        DistressButton.OnPressed += _ => DistressPressed?.Invoke(!(_lastState?.InDistress ?? false));
        CloseButton.OnPressed += _ => Close();
    }

    public void UpdateState(GpsBoundUserInterfaceState state)
    {
        _lastState = state;
        UpdateGpsName(state.GpsName);
        UpdateDistress(state.InDistress);
        UpdateTrackedEntity(state.TrackedEntity);
        UpdateGpsEntries(state.GpsEntries);

        var player = _playerManager.LocalSession?.AttachedEntity;
        if (player.HasValue)
            CompassContainer.UpdateState(state, _entityManager.System<SharedTransformSystem>().GetMapCoordinates(player.Value));
    }

    public void UpdateGpsName(string gpsName)
    {
        if (_lastState != null)
            _lastState.GpsName = gpsName;
        GpsName.Text = gpsName;
    }

    public void UpdateDistress(bool inDistress)
    {
        if (_lastState != null)
            _lastState.InDistress = inDistress;
        DistressButton.ModulateSelfOverride = inDistress ? Color.Red : null;
    }

    public void UpdateTrackedEntity(NetEntity? trackedEntity)
    {
        if (_lastState != null)
            _lastState.TrackedEntity = trackedEntity;

        if (trackedEntity.HasValue)
        {
            var trackedEntry = _lastState?.GpsEntries.FirstOrDefault(e => e.NetEntity == trackedEntity.Value);
            if (trackedEntry != null)
            {
                var coords = trackedEntry.Coordinates;
                TrackedPositionLabel.Text = $"{coords.X:F0}, {coords.Y:F0}";
            }
            else
            {
                TrackedPositionLabel.Text = Loc.GetString("gps-window-position-unknown");
            }
        }
        else
        {
            TrackedPositionLabel.Text = Loc.GetString("gps-window-position-none");
        }

        if (_lastState != null)
            UpdateGpsEntries(_lastState.GpsEntries);
    }

    public void UpdateGpsEntries(List<GpsEntry> gpsEntries)
    {
        if (_lastState != null)
            _lastState.GpsEntries = gpsEntries;

        GpsList.DisposeAllChildren();

        var sortedEntries = gpsEntries
            .OrderByDescending(e => e.IsDistress)
            .ThenBy(e =>
            {
                if (e.PrototypeId == null) return false;
                var proto = _prototypeManager.Index<EntityPrototype>(e.PrototypeId);
                return proto.Components.ContainsKey("NavMapBeacon");
            })
            .ThenBy(e => e.Name)
            .ToList();

        foreach (var entry in sortedEntries)
        {
            var item = new GpsListEntry();
            var label = item.FindControl<Label>("NameableLabel");
            var iconRect = item.FindControl<TextureRect>("EntryIcon");

            var text = entry.Name ?? "Unknown";
            label.Text = text.Length > 10 ? text.Substring(0, 10) : text;
            iconRect.Modulate = entry.Color;

            if (entry.IsDistress)
            {
                iconRect.Texture = _distressSprite;
            }
            else if (entry.PrototypeId != null)
            {
                var icon = _entityManager.System<SpriteSystem>().GetPrototypeIcon(entry.PrototypeId);
                iconRect.Texture = icon.Default;
            }
            else
            {
                var icon = _entityManager.System<SpriteSystem>().GetPrototypeIcon("HandheldGPS");
                iconRect.Texture = icon.Default;
            }

            if (_lastState?.TrackedEntity == entry.NetEntity)
            {
                item.Pressed = true;
            }

            item.OnPressed += _ => TrackedEntitySelected?.Invoke(entry.NetEntity);

            GpsList.AddChild(item);
        }
    }

    public void UpdateTrackedCoordinates(NetEntity netEntity, MapCoordinates coordinates)
    {
        if (_lastState is not { TrackedEntity: { } tracked } || tracked != netEntity)
            return;

        var trackedEntry = _lastState.GpsEntries.FirstOrDefault(e => e.NetEntity == tracked);
        if (trackedEntry == null)
            return;

        trackedEntry.Coordinates = coordinates;
        TrackedPositionLabel.Text = $"{coordinates.X:F0}, {coordinates.Y:F0}";
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_lastState is null)
            return;

        var player = _playerManager.LocalSession?.AttachedEntity;
        if (player is not { } playerUid)
        {
            CompassContainer.UpdateState(_lastState, null);
            return;
        }

        var transform = _entityManager.System<SharedTransformSystem>();
        var mapCoords = transform.GetMapCoordinates(playerUid);
        GpsPositionLabel.Text = $"{mapCoords.Position.X:F0}, {mapCoords.Position.Y:F0}";
        CompassContainer.UpdateState(_lastState, mapCoords);
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}
