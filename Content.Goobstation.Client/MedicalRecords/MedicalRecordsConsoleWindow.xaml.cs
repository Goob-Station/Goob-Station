using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Systems;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Utility;
using System.Linq;
using Content.Shared.StatusIcon;
using Robust.Client.GameObjects;
using Content.Goobstation.Shared.MedicalRecords;

namespace Content.Goobstation.Client.MedicalRecords;

// TODO: dedupe shitcode from general records theres a lot
[GenerateTypedNameReferences]
public sealed partial class MedicalRecordsConsoleWindow : FancyWindow
{
    private readonly IPlayerManager _player;
    private readonly IPrototypeManager _proto;
    private readonly IRobustRandom _random;
    private readonly AccessReaderSystem _accessReader;
    [Dependency] private readonly IEntityManager _entManager = default!;
    private readonly SpriteSystem _spriteSystem;

    public readonly EntityUid Console;

    public Action<uint?>? OnKeySelected;
    public Action<StationRecordFilterType, string>? OnFiltersChanged;
    public Action<uint>? OnCheckStatus;
    public Action<MedicalRecord, bool, bool>? OnHistoryUpdated;
    public Action? OnHistoryClosed;

    private bool _access;
    private uint? _selectedKey;
    private MedicalRecord? _selectedRecord;

    private StationRecordFilterType _currentFilterType;

    public MedicalRecordsConsoleWindow(EntityUid console, IPlayerManager playerManager, IPrototypeManager prototypeManager, IRobustRandom robustRandom, AccessReaderSystem accessReader)
    {
        RobustXamlLoader.Load(this);

        Console = console;
        _player = playerManager;
        _proto = prototypeManager;
        _random = robustRandom;
        _accessReader = accessReader;
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entManager.System<SpriteSystem>();

        _currentFilterType = StationRecordFilterType.Name;

        OpenCentered();

        foreach (var item in Enum.GetValues<StationRecordFilterType>())
        {
            FilterType.AddItem(GetTypeFilterLocals(item), (int)item);
        }

        RecordListing.OnItemSelected += args =>
        {
            if (RecordListing[args.ItemIndex].Metadata is not uint cast)
                return;

            OnKeySelected?.Invoke(cast);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            OnKeySelected?.Invoke(null);
        };

        FilterType.OnItemSelected += eventArgs =>
        {
            var type = (StationRecordFilterType)eventArgs.Id;

            if (_currentFilterType != type)
            {
                _currentFilterType = type;
                FilterListingOfRecords(FilterText.Text);
            }
        };

        FilterText.OnTextEntered += args =>
        {
            FilterListingOfRecords(args.Text);
        };

        HistoryButton.OnPressed += _ =>
        {
            if (_selectedRecord is { } record)
                OnHistoryUpdated?.Invoke(record, _access, true);
        };
    }

    public void UpdateState(MedicalRecordsConsoleUiState state)
    {
        if (state.Filter != null)
        {
            if (state.Filter.Type != _currentFilterType)
            {
                _currentFilterType = state.Filter.Type;
            }

            if (state.Filter.Value != FilterText.Text)
            {
                FilterText.Text = state.Filter.Value;
            }
        }

        _selectedKey = state.SelectedKey;
        FilterType.SelectId((int)_currentFilterType);
        NoRecords.Visible = state.RecordListing == null || state.RecordListing.Count == 0;
        PopulateRecordListing(state.RecordListing);

        // set up the selected person's record
        var selected = _selectedKey != null;

        PersonContainer.Visible = selected;
        RecordUnselected.Visible = !selected;

        _access = _player.LocalSession?.AttachedEntity is {} player
            && _accessReader.IsAllowed(player, Console);

        // hide access-required editing parts when no access
        var editing = _access && selected;

        if (state is { MedicalRecord: not null, StationRecord: not null })
        {
            PopulateRecordContainer(state.StationRecord, state.MedicalRecord);
            OnHistoryUpdated?.Invoke(state.MedicalRecord, _access, false);
            _selectedRecord = state.MedicalRecord;
        }
        else
        {
            _selectedRecord = null;
            OnHistoryClosed?.Invoke();
        }
    }

    private void PopulateRecordListing(Dictionary<uint, string>? listing)
    {
        if (listing == null)
        {
            RecordListing.Clear();
            return;
        }

        var entries = listing.Select(i => new ItemList.Item(RecordListing) {
                Text = i.Value,
                Metadata = i.Key
        }).ToList();
        entries.Sort((a, b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal));
        RecordListing.SetItems(entries, (a,b) => string.Compare(a.Text, b.Text));
    }

    private void PopulateRecordContainer(GeneralStationRecord stationRecord, MedicalRecord criminalRecord)
    {
        var specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Misc/job_icons.rsi"), "Unknown");
        var na = Loc.GetString("generic-not-available-shorthand");
        PersonName.Text = stationRecord.Name;
        PersonJob.Text = stationRecord.JobTitle ?? na;

        // Job icon
        if (_proto.TryIndex<JobIconPrototype>(stationRecord.JobIcon, out var proto))
        {
            PersonJobIcon.Texture = _spriteSystem.Frame0(proto.Icon);
        }

        PersonPrints.Text = stationRecord.Fingerprint ??  Loc.GetString("generic-not-available-shorthand");
        PersonDna.Text = stationRecord.DNA ??  Loc.GetString("generic-not-available-shorthand");
    }

    private void FilterListingOfRecords(string text = "")
    {
        OnFiltersChanged?.Invoke(_currentFilterType, text);
    }

    private string GetTypeFilterLocals(StationRecordFilterType type)
    {
        return Loc.GetString($"criminal-records-{type.ToString().ToLower()}-filter");
    }
}
