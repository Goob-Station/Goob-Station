// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 Lumminal <81829924+Lumminal@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Werewolf.Components;
using Content.Goobstation.Shared.Werewolf.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Goobstation.Client.Werewolf.UI;

[GenerateTypedNameReferences]
public sealed partial class MutationMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly IPrototypeManager _proto;
    private readonly SpriteSystem _sprite;

    private readonly EntityUid _owner;

    private Dictionary<TextureButton, ProtoId<WerewolfFormPrototype>> _buttonToFormMap = new();

    private ProtoId<WerewolfFormPrototype>? _selectedForm;
    public event Action<ProtoId<WerewolfFormPrototype>?>? ClaimForm;


    private int? _lastFuryPoints;

    public MutationMenu(EntityUid owner, IPrototypeManager proto, SpriteSystem spriteSystem)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = spriteSystem;
        _proto = proto;

        _owner = owner;

        MutationCloseButton.OnPressed += CloseButtonOnPressed;
    }

    private void CloseButtonOnPressed(BaseButton.ButtonEventArgs obj)
    {
        ClaimForm?.Invoke(_selectedForm);
        Close();
    }

    public void Populate()
    {
        if (!_entityManager.TryGetComponent<WerewolfComponent>(_owner, out var werewolf) ||
            !_entityManager.TryGetComponent<WerewolfTransformComponent>(_owner, out var werewolfTransform))
            return;

        UpdateFury(werewolf.Fury);
        AddWerewolfForms((_owner, werewolfTransform));
    }

    private void UpdateFury(int points)
    {
        // here update claim button if fury is at the right amount
        if (_player.LocalSession?.AttachedEntity is not { } player)
            return;

        if (points == _lastFuryPoints)
            return;

        _lastFuryPoints = points;
        FuryLabel.Text = Loc.GetString("ui-fury-label", ("points", points));
    }

    private void AddWerewolfForms(Entity<WerewolfTransformComponent> ent)
    {
        foreach (var form in ent.Comp.UnlockedWerewolfForms)
        {
            var formName = GetFormName(form);
            var textureButton = new TextureButton()
            {
                TextureNormal = GetTexture(form),
                Name = formName,
                ToolTip = formName,
                MinSize = new Vector2(64, 64)
            };
            textureButton.OnPressed += FormOnPressed;
            _buttonToFormMap[textureButton] = form;

            FormsGrid.AddChild(textureButton);
        }
    }

    private void FormOnPressed(BaseButton.ButtonEventArgs obj)
    {
        MutationCloseButton.Disabled = true;

        // Change the description and fury costs here
        if (!_buttonToFormMap.TryGetValue((TextureButton)obj.Button, out var form) ||
            GetDescription(form) is not { } description)
            return;

        FormDescriptionLabel.Text = Loc.GetString(description);
        FormCostLabel.Text = Loc.GetString("ui-form-cost-label", ("cost", GetFuryCost(form)));

        _selectedForm = form;

        if (_lastFuryPoints >= GetFuryCost(form))
            MutationCloseButton.Disabled = false;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_entityManager.TryGetComponent<WerewolfComponent>(_owner, out var werewolf))
            UpdateFury(werewolf.Fury);
    }

    #region Helper

    private Texture? GetTexture(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index) ||
            index.Configuration.Sprite is not {} sprite ||
            sprite is not SpriteSpecifier.Rsi rsiSprite)
            return null;

        return _sprite.Frame0(rsiSprite);
    }

    private string? GetFormName(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index))
            return string.Empty;

        return index.Configuration.Name;
    }

    private LocId? GetDescription(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index))
            return string.Empty;

        return index.Configuration.Description;
    }

    private int GetFuryCost(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index))
            return 0;

        return index.Configuration.FuryCost;
    }

    #endregion
}

