// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 Lumminal <81829924+Lumminal@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Goobstation.Shared.Werewolf.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Timing;

namespace Content.Goobstation.Client.Werewolf.UI;

[GenerateTypedNameReferences]
public sealed partial class MutationMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    public event Action? Closed;

    private int? _lastFuryPoints;

    public EntityUid? Entity { get; private set; }
    public MutationMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        MutationCloseButton.OnPressed += CloseButtonOnPressed;
    }

    private void CloseButtonOnPressed(BaseButton.ButtonEventArgs obj)
    {
        Closed?.Invoke();
        Close();
    }

    public void SetEntity(EntityUid ent)
    {
        Entity = ent;

        if (!_entityManager.TryGetComponent<WerewolfComponent>(Entity, out var werewolf))
            return;

        UpdateFury(werewolf.Fury);
    }

    private void UpdateFury(int points)
    {
        // here update claim button if fury is at the right amount
        if (_player.LocalSession?.AttachedEntity is not { } player)
            return;

        if (points == _lastFuryPoints)
            return;

        _lastFuryPoints = points;
        FuryLabel.Text = Loc.GetString("ui-fury-label", ("points", points));
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_entityManager.TryGetComponent<WerewolfComponent>(Entity, out var werewolf))
            UpdateFury(werewolf.Fury);
    }
}

