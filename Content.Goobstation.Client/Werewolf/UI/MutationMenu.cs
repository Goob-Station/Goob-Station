using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Werewolf.Components;
using Content.Goobstation.Shared.Werewolf.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Goobstation.Client.Werewolf.UI;

[GenerateTypedNameReferences]
public sealed partial class MutationMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly IPrototypeManager _proto;
    private readonly SpriteSystem _sprite;

    private readonly EntityUid _owner;

    public event Action? ClaimForm;

    private int? _lastFuryPoints;

    public MutationMenu(EntityUid owner, IPrototypeManager proto, SpriteSystem spriteSystem)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = spriteSystem;
        _proto = proto;

        _owner = owner;

        MutationCloseButton.OnPressed += CloseButtonOnPressed;
    }

    private void CloseButtonOnPressed(BaseButton.ButtonEventArgs obj)
    {
        ClaimForm?.Invoke();
        Close();
    }

    public void Populate()
    {
        if (!_entityManager.TryGetComponent<WerewolfComponent>(_owner, out var werewolf) ||
            !_entityManager.TryGetComponent<WerewolfTransformComponent>(_owner, out var werewolfTransform))
            return;

        UpdateFury(werewolf.Fury);
        AddWerewolfForms((_owner, werewolfTransform));
    }

    private void UpdateFury(int points)
    {
        // here update claim button if fury is at the right amount
        if (_player.LocalSession?.AttachedEntity is not { } player)
            return;

        if (points == _lastFuryPoints)
            return;

        _lastFuryPoints = points;
        FuryLabel.Text = Loc.GetString("ui-fury-label", ("points", points));
    }

    private void AddWerewolfForms(Entity<WerewolfTransformComponent> ent)
    {
        var testButton = new TextureButton()
        {
            MinSize = new Vector2(64, 64),
            Modulate = Color.Red // Force a visible color
        };
        FormsGrid.AddChild(testButton);

        foreach (var form in ent.Comp.UnlockedWerewolfForms)
        {
            var sprite = GetSprite(form);
            if (sprite == null)
                continue;

            var textureButton = new TextureButton()
            {
                TextureNormal = _sprite.Frame0(sprite),
                Name = GetFormName(form),
                ToolTip = form.ToString(),
                MinSize = new Vector2(64, 64)
            };

            Logger.Info($"Adding form button: {form}");
            FormsGrid.AddChild(textureButton);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_entityManager.TryGetComponent<WerewolfComponent>(_owner, out var werewolf))
            UpdateFury(werewolf.Fury);
    }

    #region Helper

    private SpriteSpecifier? GetSprite(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index))
            return null;

        return index.Configuration.Sprite;
    }

    private string? GetFormName(ProtoId<WerewolfFormPrototype> form)
    {
        if (!_proto.TryIndex(form, out var index))
            return string.Empty;

        return index.Configuration.Name;
    }

    #endregion
}

