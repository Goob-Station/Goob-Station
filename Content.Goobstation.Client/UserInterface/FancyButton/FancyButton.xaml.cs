using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Goobstation.Client.UserInterface.FancyButton;

[Virtual]
[GenerateTypedNameReferences]
public partial class FancyButton : Control
{
    // Вызывается по нажатию кнопки
    public Action<BaseButton.ButtonEventArgs>? OnPressed;

    // Стандартные цвета
    public static readonly Color DefaultColor = Color.FromHex("#141F2F");
    public static readonly Color DefaultBorderColor = Color.FromHex("#4972A1");
    public static readonly Color DefaultHoveredColor = Color.FromHex("#4972A1");
    private static readonly Color DefaultDisabledColor = Color.FromHex("#47000fff");

    // Использующиеся цвета, меняются в коде
    public Color Color = DefaultColor;
    public Color BorderColor = DefaultBorderColor;
    public Color HoveredColor = DefaultHoveredColor;
    public Color DisabledColor = DefaultDisabledColor;

    public FancyButton()
    {
        RobustXamlLoader.Load(this);

        Button.OnPressed += Pressed;
        Button.OnDrawModeChanged += UpdateColor;

        UpdateColor();
    }

    public void UpdateColor()
    {
        var panel = (StyleBoxFlat)Panel.PanelOverride!;
        if (Button.Disabled)
            panel.BackgroundColor = DisabledColor;
        else
            panel.BackgroundColor = Button.IsHovered ? HoveredColor : Color;

        panel.BorderColor = BorderColor;
    }

    private void Pressed(BaseButton.ButtonEventArgs args)
    {
        OnPressed?.Invoke(args);
    }
}
