// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 BarryNorfolk <barrynorfolkman@protonmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using Content.Client.Message;
using Content.Goobstation.Shared.Xenobiology.XenobiologyBountyConsole;
using Content.Shared.Cargo;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.Xenobiology.XenobiologyBountyConsole;

[GenerateTypedNameReferences]
public sealed partial class XenobiologyBountyHistoryEntry : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public XenobiologyBountyHistoryEntry(XenobiologyBountyHistoryData bounty)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        if (!_prototype.TryIndex(bounty.Bounty, out var bountyPrototype))
            return;

        var items = bountyPrototype.Entries
            .Select(entry => Loc.GetString("bounty-console-manifest-entry",
                ("amount", entry.Amount),
                ("item", Loc.GetString(entry.Name))))
            .ToList();

        ManifestLabel.SetMarkup(Loc.GetString("bounty-console-manifest-label", ("item", string.Join(", ", items))));
        RewardLabel.SetMarkup(Loc.GetString("xenobiology-console-reward-label", ("reward", bountyPrototype.PointsAwarded)));
        IdLabel.SetMarkup(Loc.GetString("bounty-console-id-label", ("id", bounty.Id)));

        TimestampLabel.SetMarkup(bounty.Timestamp.ToString(@"hh\:mm\:ss"));

        if (bounty.Result == CargoBountyHistoryData.BountyResult.Completed)
        {
            NoticeLabel.SetMarkup(Loc.GetString("bounty-console-history-notice-completed-label"));
        }
        else
        {
            NoticeLabel.SetMarkup(Loc.GetString("bounty-console-history-notice-skipped-label",
                ("id", bounty.ActorName ?? "")));
        }
    }
}
