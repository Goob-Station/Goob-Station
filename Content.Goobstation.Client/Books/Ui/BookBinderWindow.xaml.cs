using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Books;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Goobstation.Client.Books.Ui;

[GenerateTypedNameReferences]
public sealed partial class BookBinderWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _proto = default!;

    public Action<string, string, string, string, List<string>, Dictionary<string, (ResPath Path, string State)>>? CreatePressed;
    public Action<Dictionary<string, (ResPath Path, string State)>>? CustomizeBookPressed;
    public Action<NetEntity>? EjectPressed;

    public Dictionary<string, (ResPath Path, string State)> Layers = new();

    public BookBinderWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Ensure that we have basic layers selected
        var prototypes = _proto.EnumeratePrototypes<BookBindingLayerPrototype>().OrderBy(x => x.Priority);
        foreach (var item in prototypes)
            Layers.Add(item.Layer, (item.RsiPath, item.AllowedStates[0]));

        AuthorNameEdit.OnTextEntered += args => UpdateCreateButton();
        GenreEdit.OnTextEntered += args => UpdateCreateButton();
        TitleEdit.OnTextEntered += args => UpdateCreateButton();
        DescEdit.OnTextChanged += args => UpdateCreateButton();

        DescEdit.Placeholder = new Rope.Leaf(Loc.GetString("book-binder-menu-desc-placeholder"));

        CreateBook.OnPressed += args => CreateBookPressed();
        SelectBook.OnPressed += args => CustomizeBookPressed?.Invoke(Layers);
    }

    public void Populate(Dictionary<NetEntity, string> pages)
    {
        PagesContainer.RemoveAllChildren();

        var count = pages.Count;

        PaperCountLabel.Text = $"Pages: {count}";

        for (var i = 0; i < count; i++)
        {
            var entry = new BookBinderPageEntry(pages.ElementAt(i).Value)
            {
                HorizontalExpand = true,
                SetHeight = 340
            };

            entry.EjectButton.OnPressed += args => EjectPressed?.Invoke(pages.ElementAt(i).Key);

            PagesContainer.AddChild(entry);
        }

        UpdateCreateButton();
    }

    private void UpdateCreateButton()
    {
        CreateBook.Disabled = !IsBookValid();
    }

    private void CreateBookPressed()
    {
        List<string> pages = new();

        if (!IsBookValid())
            return;

        for (var i = 0; i < PagesContainer.ChildCount; i++)
            pages.Add((PagesContainer.Children.ElementAt(i) as BookBinderPageEntry)!.Text);

        CreatePressed?.Invoke(TitleEdit.Text, GenreEdit.Text, AuthorNameEdit.Text, Rope.Collapse(DescEdit.TextRope), pages, Layers);
    }

    private bool IsBookValid()
    {
        return PagesContainer.ChildCount > 0 &&
            !string.IsNullOrEmpty(AuthorNameEdit.Text) &&
            !string.IsNullOrEmpty(TitleEdit.Text) &&
            !string.IsNullOrEmpty(GenreEdit.Text) &&
            !string.IsNullOrEmpty(Rope.Collapse(DescEdit.TextRope));
    }
}
