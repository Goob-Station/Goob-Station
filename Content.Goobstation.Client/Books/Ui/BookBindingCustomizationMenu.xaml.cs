using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Books;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Goobstation.Client.Books.Ui;

[GenerateTypedNameReferences]
public sealed partial class BookBindingCustomizationMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    private readonly SpriteSystem _sprite = default!;

    public Action<Dictionary<string, (ResPath Path, string State)>>? CreatePressed;

    public Dictionary<string, (ResPath Path, string State)> Layers = new();

    public BookBindingCustomizationMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entMan.System<SpriteSystem>();
        SelectButton.OnPressed += args => CreatePressed?.Invoke(Layers);
    }

    public void InitSelectors(Dictionary<string, (ResPath Path, string State)> layers)
    {
        LayersContainer.RemoveAllChildren();

        var prototypes = _proto.EnumeratePrototypes<BookBindingLayerPrototype>().OrderBy(x => x.Priority);
        foreach (var binding in prototypes)
        {
            ScrollContainer scroll = new()
            {
                HScrollEnabled = false,
                VerticalExpand = true,
                HorizontalExpand = true,
                Margin = new(2)
            };

            BoxContainer box = new()
            {
                Margin = new(2),
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Top
            };

            scroll.AddChild(box);

            ButtonGroup group = new(false);
            for (var i = 0; i < binding.AllowedStates.Count; i++)
            {
                bool toggle = false;
                if (layers.TryGetValue(binding.Layer, out var sprite))
                    toggle = binding.AllowedStates[i] == sprite.State;
                else
                    toggle = i == 0;

                AddButton(box, group, binding.RsiPath, binding.AllowedStates[i], binding.Layer, toggle);
            }

            LayersContainer.AddChild(scroll);
        }
    }

    private void AddButton(BoxContainer parent, ButtonGroup group, ResPath path, string state, string map, bool toggle)
    {
        var button = new Button()
        {
            Text = Loc.GetString($"book-binding-part-{state}"),
            HorizontalExpand = true,
            SetHeight = 48,
            ToggleMode = true,
            Group = group,
            StyleClasses = { StyleNano.ButtonSquare }
        };

        parent.AddChild(button);

        button.OnPressed += args =>
        {
            Layers[map] = (path, state);
            UpdatePreview();
        };

        // I KNOW its not the best way to do it, im just lazy
        if (toggle)
        {
            button.SetClickPressed(true);
            Layers[map] = (path, state);
            UpdatePreview();
        }
    }

    private void UpdatePreview()
    {
        if (!Preview.Entity.HasValue)
            Preview.SetEntity(_entMan.Spawn("CustomBookTemplate"));

        var ent = Preview.Entity!.Value;

        foreach (var item in Layers)
        {
            if (!_sprite.TryGetLayer(ent.Owner, item.Key, out var layer, false))
                continue;

            var path = item.Value.Path;
            var state = new RSI.StateId(item.Value.State);
            _sprite.LayerSetRsi(layer, path, state);
        }

    }
}
