using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Books;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Goobstation.Client.Books.Ui;

[GenerateTypedNameReferences]
public sealed partial class AdminBookVerificationMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    private readonly SpriteSystem _sprite;

    public int Selected = -1;
    private BookData? _selectedBook;

    public Action? ApproveBook;
    public Action? DeclineBook;

    public AdminBookVerificationMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entMan.System<SpriteSystem>();

        CreateButton.OnPressed += args => ApproveBook?.Invoke();
        DeclineButton.OnPressed += args => DeclineBook?.Invoke();

        Preview.SetEntity(_entMan.Spawn("CustomBookTemplate"));
        UpdateText();
        UpdatePreview();
    }

    public void Populate(Dictionary<int, BookData> books)
    {
        BooksContainer.RemoveAllChildren();

        foreach (var item in books)
        {
            var button = new Button()
            {
                Text = item.Value.Title,
                SetHeight = 38f,
                HorizontalExpand = true,
                Disabled = item.Value.Equals(_selectedBook)
            };

            button.OnPressed += args =>
            {
                foreach (var item in BooksContainer.Children)
                {
                    if (item is Button prevButton)
                        prevButton.Disabled = false;
                }

                button.Disabled = true;
                _selectedBook = item.Value;
                Selected = item.Key;
                UpdateText();
                UpdatePreview();
            };

            BooksContainer.AddChild(button);
        }
    }

    /// <summary>
    /// Updates selected book fields
    /// </summary>
    private void UpdateText()
    {
        PagesContainer.RemoveAllChildren();
        CreateButton.Disabled = _selectedBook == null;
        DeclineButton.Disabled = _selectedBook == null;

        if (_selectedBook == null)
        {
            AuthorNameLabel.SetMarkup("Author: None selected");
            GenreLabel.SetMarkup("Genre: None selected");
            TitleLabel.SetMarkup("Title: None selected");
            DescLabel.SetMarkup("Desc: None selected");
            PagesContainer.Visible = false;
            return;
        }

        PagesContainer.Visible = true;

        AuthorNameLabel.SetMarkup($"Author: {_selectedBook.Author}");
        GenreLabel.SetMarkup($"Genre: {_selectedBook.Genre}");
        TitleLabel.SetMarkup($"Title: {_selectedBook.Title}");
        DescLabel.SetMarkup($"Desc: {_selectedBook.Desc}");

        foreach (var page in _selectedBook.Pages)
        {
            var entry = new BookBinderPageEntry(page)
            {
                SetHeight = 250f
            };
            entry.EjectButton.Visible = false;
            entry.TextEdit.Editable = false;

            PagesContainer.AddChild(entry);
        }
    }

    /// <summary>
    /// Updates preview entity
    /// </summary>
    private void UpdatePreview()
    {
        if (!Preview.Entity.HasValue)
            Preview.SetEntity(_entMan.Spawn("CustomBookTemplate"));

        if (_selectedBook == null)
            return;

        var ent = Preview.Entity!.Value;

        foreach (var item in _selectedBook.Binding)
        {
            if (!_sprite.TryGetLayer(ent.Owner, item.Key, out var layer, false))
                continue;

            var path = item.Value.Path;
            var state = new RSI.StateId(item.Value.State);
            _sprite.LayerSetRsi(layer, path, state);
        }
    }
}
