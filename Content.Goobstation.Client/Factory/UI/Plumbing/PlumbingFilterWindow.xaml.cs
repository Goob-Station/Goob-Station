// SPDX-FileCopyrightText: 2025 deltanedas <@deltanedas:kde.org>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Factory.Plumbing;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.Factory.UI.Plumbing;

[GenerateTypedNameReferences]
public sealed partial class PlumbingFilterWindow : FancyWindow
{
    [Dependency] private readonly EntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    public event Action<ProtoId<ReagentPrototype>?>? OnChange;

    private ProtoId<ReagentPrototype>? _current;
    private ProtoId<ReagentPrototype>? _selected;

    public PlumbingFilterWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        ReagentList.OnItemSelected += args =>
        {
            _selected = (ProtoId<ReagentPrototype>) args.ItemList[args.ItemIndex].Metadata!;
            UpdateSelectButton();
        };
        ReagentList.OnItemDeselected += _ =>
        {
            _selected = null;
            UpdateSelectButton();
        };
        SearchBar.OnTextChanged += _ => UpdateReagentPrototypes(SearchBar.Text);
        SelectButton.OnPressed += _ =>
        {
            if (_current == _selected)
                return;

            _current = _selected;
            OnChange?.Invoke(_selected);
        };

        UpdateReagentPrototypes();
        UpdateSelectButton();
    }

    private void UpdateSelectButton()
    {
        SelectButton.Disabled = _selected != _current;
        if (SelectButton.Disabled)
        {
            SelectButton.Text = Loc.GetString("plumbing-filter-window-default");
            return;
        }

        SelectButton.Text = _selected is {} id
            ? Loc.GetString("plumbing-filter-window-change", ("reagent", _proto.Index(id).LocalizedName))
            : Loc.GetString("plumbing-filter-window-remove");
    }

    private void UpdateReagentPrototypes(string? filter = null)
    {
        ReagentList.Clear();
        filter = filter?.Trim()?.ToLowerInvariant();
        foreach (var reagent in _proto.EnumeratePrototypes<ReagentPrototype>())
        {
            var name = reagent.LocalizedName;
            if (!string.IsNullOrEmpty(filter) &&
               !reagent.ID.ToLowerInvariant().Contains(filter) &&
               !name.ToLowerInvariant().Contains(filter))
            {
                continue;
            }

            var item = new ItemList.Item(ReagentList)
            {
                Metadata = (ProtoId<ReagentPrototype>) reagent.ID,
                Text = name
            };

            ReagentList.Add(item);
        }
    }

    public void SetEntity(EntityUid uid)
    {
        if (!_entMan.TryGetComponent<PlumbingFilterComponent>(uid, out var comp))
            return;

        _current = comp.Filter;
        UpdateSelectButton();
    }
}
