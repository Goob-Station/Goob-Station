// SPDX-FileCopyrightText: 2023 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Killerqu00 <47712032+Killerqu00@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2025 BeBright <98597725+be1bright@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 LuciferEOS <stepanteliatnik2022@gmail.com>
// SPDX-FileCopyrightText: 2025 LuciferMkshelter <154002422+LuciferEOS@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 LuciferMkshelter <stepanteliatnik2022@gmail.com>
// SPDX-FileCopyrightText: 2025 gluesniffler <159397573+gluesniffler@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 pheenty <fedorlukin2006@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Client.Message;
using Content.Goobstation.Shared.NTR;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
// goidacore inside
namespace Content.Goobstation.Client.NTR.UI;

[GenerateTypedNameReferences]
public sealed partial class TaskEntry : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;

    public Action? OnLabelButtonPressed;
    public Action? OnSkipButtonPressed;

    private readonly TimeSpan _skipAvailableTime;
    private bool _skipButtonAvailable;
    private TimeSpan _nextUpdate = TimeSpan.Zero;

    public TaskEntry(NtrTaskData task, TimeSpan untilNextSkip)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _skipAvailableTime = _gameTiming.RealTime + untilNextSkip;

        if (!_prototype.TryIndex(task.Task, out var taskPrototype))
            return;

        if (task.IsAccepted)
            PrintButton.Disabled = true;

        var items = new List<string>();

        foreach (var entry in taskPrototype.Entries)
            items.Add(Loc.GetString("ntr-bounty-console-manifest-entry",
                ("amount", entry.Amount),
                ("item", Loc.GetString(entry.Name))));

        ManifestLabel.SetMarkup(Loc.GetString("bounty-console-manifest-label", ("item", string.Join(", ", items))));
        RewardLabel.SetMarkup(Loc.GetString("ntr-bounty-console-reward-label", ("reward", taskPrototype.Reward)));
        DescriptionLabel.SetMarkup(Loc.GetString("bounty-console-description-label", ("description", Loc.GetString(taskPrototype.Description))));
        IdLabel.SetMarkup(Loc.GetString("bounty-console-id-label", ("id", task.Id)));

        PrintButton.OnPressed += _ => OnLabelButtonPressed?.Invoke();
        SkipButton.OnPressed += _ => OnSkipButtonPressed?.Invoke();

        UpdateSkipButton();
    }

    private void UpdateSkipButton()
    {
        var remaining = _skipAvailableTime - _gameTiming.RealTime;

        if (remaining > TimeSpan.Zero)
        {
            SkipButton.Label.Text = remaining.ToString(@"mm\:ss");
            SkipButton.Disabled = true;
            _skipButtonAvailable = false;

            _nextUpdate = _gameTiming.RealTime + TimeSpan.FromSeconds(1);
        }
        else
        {
            SkipButton.Label.Text = Loc.GetString("bounty-console-skip-button-text");
            SkipButton.Disabled = false;
            _skipButtonAvailable = true;
        }
    }


    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (_skipButtonAvailable
            || _gameTiming.RealTime < _nextUpdate)
            return;

        UpdateSkipButton();
    }
}
