// SPDX-FileCopyrightText: 2023 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Killerqu00 <47712032+Killerqu00@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 BarryNorfolk <barrynorfolkman@protonmail.com>
// SPDX-FileCopyrightText: 2025 BeBright <98597725+be1bright@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 LuciferEOS <stepanteliatnik2022@gmail.com>
// SPDX-FileCopyrightText: 2025 LuciferMkshelter <154002422+LuciferEOS@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 LuciferMkshelter <stepanteliatnik2022@gmail.com>
// SPDX-FileCopyrightText: 2025 gluesniffler <159397573+gluesniffler@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 pheenty <fedorlukin2006@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.NTR;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.NTR.UI;

[GenerateTypedNameReferences]
public sealed partial class NtrTaskMenu : FancyWindow
{
    private readonly IPrototypeManager _prototypeManager;

    public Action<string>? OnLabelButtonPressed;
    public Action<string>? OnSkipButtonPressed;

    public NtrTaskMenu()
    {
        RobustXamlLoader.Load(this);
        _prototypeManager = IoCManager.Resolve<IPrototypeManager>();

        MasterTabContainer.SetTabTitle(0, Loc.GetString("bounty-console-tab-available-label"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("bounty-console-tab-history-label"));
    }

    public void UpdateEntries(List<NtrTaskData> tasks, List<NtrTaskHistoryData> history, TimeSpan untilNextSkip)
    {
        BountyEntriesContainer.Children.Clear();
        foreach (var task in tasks)
        {
            var entry = new TaskEntry(task, untilNextSkip);
            entry.OnLabelButtonPressed += () => OnLabelButtonPressed?.Invoke(task.Id);
            entry.OnSkipButtonPressed += () => OnSkipButtonPressed?.Invoke(task.Id);
            BountyEntriesContainer.AddChild(entry);
        }
        BountyEntriesContainer.AddChild(new Control { MinHeight = 10 });

        var validHistory = history
            .Where(h => !string.IsNullOrEmpty(h.Task)
                        && _prototypeManager.HasIndex<NtrTaskPrototype>(h.Task))
            .Reverse()
            .ToList();

        BountyHistoryContainer.Children.Clear();
        NoHistoryLabel.Visible = !validHistory.Any();

        foreach (var entry in validHistory)
            BountyHistoryContainer.AddChild(new NtrTaskHistoryEntry(entry));
    }
}
