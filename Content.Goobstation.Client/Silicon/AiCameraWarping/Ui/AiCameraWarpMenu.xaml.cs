// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 ThunderBear2006 <bearthunder06@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.Silicon.AiCameraWarping;
using Content.Shared.Mobs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Goobstation.Client.Silicon.AiCameraWarping.Ui;

[GenerateTypedNameReferences]
public sealed partial class AiCameraWarpMenu : FancyWindow
{
    public event Action<CameraWarpActionEvent>? OnCamWarpAction;
    public event Action? OnRefresh;

    public AiCameraWarpMenu()
    {
        RobustXamlLoader.Load(this);

        SearchBar.OnTextChanged += UpdateVisibleButtons;
        RefreshButton.OnPressed += _ => OnRefresh?.Invoke();
    }

    public void Update(CameraWarpBuiState state)
    {
        CameraWarpsDisplayContainer.Children.Clear();

        if (state.CameraList == null)
            return;

        // Sort the list alphabetically
        state.CameraList.Sort((a, b) => a.DisplayName.CompareTo(b.DisplayName));

        var previousName = "";
        var i = 2;

        state.CameraList.ForEach(data =>
        {
            // This is to make the menu more readable when
            // there is many duplicate names.
            if (data.DisplayName.Equals(previousName))
            {
                data.DisplayName = $"{previousName} {i++}";
            }
            else
            {
                previousName = data.DisplayName;
                i = 2;
            }

            var button = new Button
            {
                Text = data.DisplayName
            };

            button.OnPressed += _ =>
            {
                OnCamWarpAction?.Invoke(new CameraWarpActionEvent(data.NetEntityUid));
            };

            CameraWarpsDisplayContainer.AddChild(button);
        });
    }

    private void UpdateVisibleButtons(LineEdit.LineEditEventArgs args)
    {
        foreach (var child in CameraWarpsDisplayContainer.Children)
        {
            if (child is Button button)
                button.Visible = button.Text != null && button.Text.ToLower().Contains(args.Text.ToLower());
        }
    }
}