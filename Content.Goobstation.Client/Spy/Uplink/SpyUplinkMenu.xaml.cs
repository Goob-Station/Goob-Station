// SPDX-FileCopyrightText: 2025 August Eymann <august.eymann@gmail.com>
// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Goobstation.Shared.Spy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Goobstation.Client.Spy.Uplink;

[GenerateTypedNameReferences]
public sealed partial class SpyUplinkMenu : DefaultWindow
{

    private List<SpyBountyData> _cachedBounties = new();
    private TimeSpan _refreshTime;
    public Action? OnRefresh;

    public SpyUplinkMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateBounty(List<SpyBountyData> bounties, TimeSpan time)
    {
        _cachedBounties = bounties;
        _refreshTime = time;
        UpdateBounty();
    }

    public void UpdateBounty()
    {
        ClearBounties();
        foreach (var item in _cachedBounties)
        {
            AddBountyGui(item);
        }
    }
    private void AddBountyGui(SpyBountyData bounty)
    {
        var newListing = new BountyListingControl(bounty);
        newListing.SetTexture();
        UplinkBountyContainer.AddChild(newListing);
    }

    private void ClearBounties()
    {
        UplinkBountyContainer.Children.Clear();
    }

    private void UpdateCountdown(float deltaSeconds)
    {
        _refreshTime -= TimeSpan.FromSeconds(deltaSeconds);
        if (_refreshTime > TimeSpan.Zero)
        {
            RefreshTimeLabel.Text = _refreshTime.ToString("mm\\:ss");
            return;
        }
        //request an update
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        UpdateCountdown(args.DeltaSeconds);
        OnRefresh?.Invoke();
    }
}
