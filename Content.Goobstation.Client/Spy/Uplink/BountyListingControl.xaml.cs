using Content.Goobstation.Shared.Spy;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.Spy.Uplink;

[GenerateTypedNameReferences]
public sealed partial class BountyListingControl : Control
{

    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private SpyBountyData? _data;

    public BountyListingControl(SpyBountyData data)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _data = data;

        if (!_prototype.TryIndex(_data.TargetGroup, out var targetGroup))
            return;

        BountyTitle.Text = Loc.GetString("objective-condition-steal-title-alive-no-owner", ("itemName", Loc.GetString(targetGroup.Name)));
        BountyDesc.Text = Loc.GetString(targetGroup.Name);

        if (_data.Owner == null)
            return;

        ClaimedOverlay.Visible = true;
        ClaimButton.Visible = false;
    }

    public void SetTexture()
    {
        if (_data is not { } data || !_prototype.TryIndex(data.TargetGroup, out var targetGroup))
            return;

        var spriteSys = _entity.EntitySysManager.GetEntitySystem<SpriteSystem>();
        var texture = spriteSys.Frame0(targetGroup.Sprite);
        BountyItemTexture.Texture = texture;
    }
}
