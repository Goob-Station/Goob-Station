using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Robust.Client.AutoGenerated;
using Content.Goobstation.Shared.ModSuits;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Graphics;
using Robust.Client.GameObjects;
using Robust.Shared.Utility;
using Content.Goobstation.Client.ModSuits;

namespace Content.Goobstation.Client.ModSuit.UI;

[GenerateTypedNameReferences]
public sealed partial class ModSuitMenu : FancyWindow
{

    [Dependency] private readonly IEntityManager _ent = default!;
    private readonly ModSuitSystem _modsuit = default!;
    private readonly SpriteSystem _spriteSystem = default!;

    private EntityUid _mod;
    private List<Color> _buttonColors = new() { Color.FromHex("#121923ff"), Color.FromHex("#04060aFF"), Color.FromHex("#153b66"), Color.FromHex("#153b66") };

    public event Action<EntityUid>? OnRemoveButtonPressed;
    public event Action<EntityUid>? OnActivateButtonPressed;
    public event Action<EntityUid>? OnDeactivateButtonPressed;

    public ModSuitMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _modsuit = _ent.System<ModSuitSystem>();
        _spriteSystem = _ent.System<SpriteSystem>();
    }

    public void SetEntity(EntityUid uid)
    {
        MechView.SetEntity(uid);
        _mod = uid;
    }

    public void UpdateModStats(ModSuitComponent modComp)
    {
        _buttonColors = modComp.ButtonColors;

        ModComplex.Text = Loc.GetString("mod-module-space", ("complexity", modComp.CurrentComplexity), ("maxcomplexity", modComp.MaxComplexity)) + Environment.NewLine +
        Loc.GetString("mod-energy-waste", ("energy", modComp.ModEnergyBaseUsing.ToString("0.0")));

        // Set visuals
        var backpanelsStyle = new StyleBoxFlat(modComp.BackpanelsColor);
        var scrollStyle = new StyleBoxFlat(modComp.ScrollColor);

        UsernamePanel.PanelOverride = backpanelsStyle;
        ComplexityPanel.PanelOverride = backpanelsStyle;
        StatePanel.PanelOverride = backpanelsStyle;
        ScrollPanel.PanelOverride = scrollStyle;
        BackTexture.Texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new(modComp.BackgroundPath)));

        switch (_modsuit.GetPartsToggleStatus(_mod, modComp))
        {
            case ModSuitAttachedStatus.NoneToggled:
                ModState.ModulateSelfOverride = new Color(0.86f, 0.22f, 0.22f, 0.7f);
                ModState.Text = Loc.GetString("mod-none-toggled");
                break;
            case ModSuitAttachedStatus.PartlyToggled:
                ModState.ModulateSelfOverride = new Color(0.95f, 0.78f, 0.25f, 1f);
                ModState.Text = Loc.GetString("mod-partly-toggled");
                break;
            case ModSuitAttachedStatus.AllToggled:
                ModState.ModulateSelfOverride = new Color(0.35f, 0.84f, 0.33f, 1f);
                ModState.Text = Loc.GetString("mod-all-toggled");
                break;
        }


        // Update lock
        LockButton.Text = modComp.UserName != null ? Loc.GetString("mod-locked") : Loc.GetString("mod-unlocked");
        ModUsername.Text = modComp.UserName != null ? Loc.GetString("mod-user") + modComp.UserName : Loc.GetString("mod-no-user");
    }

    public void UpdateModuleView(ModBoundUiState state)
    {
        EquipmentControlContainer.RemoveAllChildren();

        foreach (var item in state.EquipmentStates)
        {
            var ent = _ent.GetEntity(item.Key);

            if (!_ent.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _ent.GetComponentOrNull<UIFragmentComponent>(ent);
            var ui = uicomp?.Ui?.GetUIFragmentRoot();

            var colors = (_buttonColors[0], _buttonColors[1], _buttonColors[2], _buttonColors[3]);
            var control = new ModuleControl(ent, metaData.EntityName, item.Value, colors, ui);

            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(ent);
            control.OnActivateButtonPressed += () => OnActivateButtonPressed?.Invoke(ent);
            control.OnDeactivateButtonPressed += () => OnDeactivateButtonPressed?.Invoke(ent);

            EquipmentControlContainer.AddChild(control);
        }
    }
}
