using Content.Client.UserInterface.Controls;
using Content.Goobstation.Shared.ModSuits;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Numerics;

namespace Content.Goobstation.Client.ModSuit.UI;

[GenerateTypedNameReferences]
public sealed partial class ModSuitRadialMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entityManager = default!;

    public event Action<EntityUid>? SendToggleClothingMessageAction;
    public EntityUid Entity { get; set; }

    public ModSuitRadialMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void SetEntity(EntityUid uid)
    {
        Entity = uid;

        CreateButtons();
    }

    private void CreateButtons()
    {
        if (!_entityManager.TryGetComponent<ModSuitComponent>(Entity, out var mod) || mod.PartsContainer == null)
            return;

        foreach (var attached in mod.ClothingUids)
        {
            var part = _entityManager.GetEntity(attached.Key);
            AddButton(part, mod.BackpanelsColor, !mod.PartsContainer.Contains(part));
        }
    }

    public void RefreshUI()
    {
        if (!_entityManager.TryGetComponent<ModSuitComponent>(Entity, out var mod) || mod.PartsContainer == null)
            return;

        foreach (var item in Main.Children)
        {
            if (item is not ModSuitRadialMenuButton button)
                continue;

            var equipped = !mod.PartsContainer.Contains(button.AttachedClothingId);

            button.SeparatorColor = equipped ? Color.LimeGreen : Color.IndianRed;
            button.BorderColor = equipped ? Color.LimeGreen : Color.IndianRed;
        }
    }

    private void AddButton(EntityUid entity, Color panelColor, bool equipped)
    {
        if (!_entityManager.TryGetComponent<MetaDataComponent>(entity, out var meta) || meta.EntityPrototype == null)
            return;

        var tooltipText = Loc.GetString($"modsuit-{(equipped ? "unattach" : "attach")}-tooltip");

        var button = new ModSuitRadialMenuButton()
        {
            BackgroundColor = panelColor,
            SeparatorColor = equipped ? Color.LimeGreen : Color.IndianRed,
            BorderColor = equipped ? Color.LimeGreen : Color.IndianRed,
            DrawBorder = true,
            StyleClasses = { "RadialMenuButton" },
            SetSize = new Vector2(64, 64),
            ToolTip = tooltipText,
            AttachedClothingId = entity
        };

        var spriteView = new SpriteView()
        {
            SetSize = new Vector2(48, 48),
            VerticalAlignment = VAlignment.Center,
            HorizontalAlignment = HAlignment.Center,
            Stretch = SpriteView.StretchMode.Fill
        };

        var copy = _entityManager.Spawn(meta.EntityPrototype.ID);
        spriteView.SetEntity(copy);
        button.AddChild(spriteView);

        button.OnButtonUp += _ => SendToggleClothingMessageAction?.Invoke(entity);

        Main.AddChild(button);
    }
}

public sealed class ModSuitRadialMenuButton : RadialMenuTextureButtonWithSector
{
    public EntityUid AttachedClothingId { get; set; }
}
