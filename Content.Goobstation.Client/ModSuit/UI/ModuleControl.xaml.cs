using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Goobstation.Client.ModSuit.UI;

[GenerateTypedNameReferences]
public sealed partial class ModuleControl : Control
{
    public event Action? OnRemoveButtonPressed;
    public event Action? OnActivateButtonPressed;
    public event Action? OnDeactivateButtonPressed;

    public ModuleControl(EntityUid entity, string itemName, bool active, (Color, Color, Color, Color) buttonColors, Control? fragment)
    {
        RobustXamlLoader.Load(this);

        EquipmentName.SetMessage(itemName);
        EquipmentView.SetEntity(entity);

        if (fragment != null)
        {
            Separator.Visible = true;
            CustomControlContainer.AddChild(fragment);
        }

        StartupButtons(active, buttonColors);
    }

    private void StartupButtons(bool active, (Color, Color, Color, Color) colors)
    {
        var activateText = active ? Loc.GetString("mod-activate-nonactive") : Loc.GetString("mod-activate-active");
        var deactivateText = active ? Loc.GetString("mod-deactivate-active") : Loc.GetString("mod-deactivate-nonactive");
        var ejectText = Loc.GetString("mod-eject");

        ActivateButton.Panel.AddChild(new Label() { Text = activateText, HorizontalAlignment = HAlignment.Center });
        DeactivateButton.Panel.AddChild(new Label() { Text = deactivateText, HorizontalAlignment = HAlignment.Center });
        EjectButton.Panel.AddChild(new Label() { Text = ejectText, HorizontalAlignment = HAlignment.Center });

        ActivateButton.Button.Disabled = active;
        DeactivateButton.Button.Disabled = !active;

        (ActivateButton.Color, ActivateButton.DisabledColor, ActivateButton.HoveredColor, ActivateButton.BorderColor) = colors;
        (DeactivateButton.Color, DeactivateButton.DisabledColor, DeactivateButton.HoveredColor, DeactivateButton.BorderColor) = colors;
        (EjectButton.Color, EjectButton.DisabledColor, EjectButton.HoveredColor, EjectButton.BorderColor) = colors;

        ActivateButton.UpdateColor();
        DeactivateButton.UpdateColor();
        EjectButton.UpdateColor();

        EjectButton.OnPressed += _ => OnRemoveButtonPressed?.Invoke();
        ActivateButton.OnPressed += _ => OnActivateButtonPressed?.Invoke();
        DeactivateButton.OnPressed += _ => OnDeactivateButtonPressed?.Invoke();
    }
}
